anova(lmeMortMain)[["p-value"]] # Obtain more precise p-values
# Treatment
lmeMortTreatment <- lme(Day3Mortality ~ Treatment, data = d, random = ~1|Experiment)
anova(lmeMortTreatment)
anova(lmeMortTreatment)[["p-value"]] # Obtain more precise p-values
summary(d$Treatment)
?lme
bookdown::render_book('index.Rmd', 'all')
install.packages("bookdown")
bookdown::render_book('index.Rmd', 'all')
getwd()
setwd("~/Desktop/Bookdown")
bookdown::render_book('index.Rmd', 'all')
bookdown::render_book('index.Rmd', 'all')
getwd()
setwd("~/Desktop/Bookdown")
library("bookdown")
bookdown::render_book('index.Rmd', 'all')
bookdown::render_book("index.Rmd","bookdown::gitbook")
setwd("~/Desktop/Pkgdown")
install.packages("pkgdown")
library(pkgdown)
devtools::install_github("r-lib/pkgdown")
setwd("~/bigPint")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
install.packages("badgecreatr")
badgecreatr::badgeplacer( githubaccount = "yourgithubname",githubrepo = "yourpackagename", branch = "master")
badgecreatr::badgeplacer( githubaccount = "lrutter",githubrepo = "bigPint", branch = "master")
badgecreatr::badgeplacer( githubaccount = "lrutter",githubrepo = "bigPint", branch = "master")
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
pkgdown::build_site()
badgecreatr::badgeplacer( githubaccount = "lrutter",githubrepo = "bigPint", branch = "master")
badgecreatr::badgeplacer( githubaccount = "lrutter",githubrepo = "bigPint", branch = "master")
pkgdown::build_site()
pkgdown::build_site()
getwd()
getwd()
setwd("~/HoneyBeePaper/NC_NR_VC_VR/data")
beeCounts <-read.delim(file="AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
View(beeCounts)
View(beeCounts)
str(beeCounts)
beeCounts2 <- beeCounts
colnames(beeCounts2) <- c("NC.1", "NC.2", "NR.1", "VR.1", "NS.1", "VP.1", "NS.2", "VR.2", "NP.1", "VP.2", "VC.1", "NP.2", "VP.3", "NP.3", "VS.1", "VS.2", "VC.2", "NC.3", "VP.4", "NC.4", "NR.2", "VC.3", "VC.4", "NP.4", "VR.3", "NC.5", "VS.3", "NP.5", "VC.5", "VS.4", "NS.3", "VS.5", "VP.5", "NR.3", "NR.4", "VC.6", "NS.4", "NC.6", "NP.6", "VR.4", "NR.5", "NR.6", "NS.5", "VP.6", "NS.6", "VR.5", "VR.6", "VS.6")
colnames(beeCounts)
colnames(beeCounts)
colnames(beeCounts2)
colnames(beeCounts2)
colnames(beeCounts2)
library(readr)
AllLaneCount <- read_csv("AllLaneCount.txt")
View(AllLaneCount)
library(readr)
AllLaneCount <- read_delim("AllLaneCount.txt",
"\t", escape_double = FALSE, trim_ws = TRUE)
View(AllLaneCount)
str(AllLaneCount)
rm(list=ls())
dev.off()
getwd()
beeCounts <-read.delim(file="AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
colnames(beeCounts) <- c("NC.1", "NC.2", "NR.1", "VR.1", "NS.1", "VP.1", "NS.2", "VR.2", "NP.1", "VP.2", "VC.1", "NP.2", "VP.3", "NP.3", "VS.1", "VS.2", "VC.2", "NC.3", "VP.4", "NC.4", "NR.2", "VC.3", "VC.4", "NP.4", "VR.3", "NC.5", "VS.3", "NP.5", "VC.5", "VS.4", "NS.3", "VS.5", "VP.5", "NR.3", "NR.4", "VC.6", "NS.4", "NC.6", "NP.6", "VR.4", "NR.5", "NR.6", "NS.5", "VP.6", "NS.6", "VR.5", "VR.6", "VS.6")
data <- beeCounts[ , order(names(beeCounts))]
str(data)
treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
treatment
iTreatment = which(treatment %in% c("NC","NR","VC","VR"))
iTreatment
data = data[,iTreatment]
str(data)
write.table(data,"processedData.txt",sep="\t",row.names=FALSE)
getwd()
setwd("~/Desktop/CV")
setwd("~/rnaseqvisualization/bigPint")
data <- readRDS("~/HoneyBeePaper/Galbraith/data/data.Rds")
str(Data)
str(data)
data <- readRDS("~/HoneyBeePaper/C_R/data/data.Rds")
str(data)
getwd()
setwd("~/HoneyBeePaper/N_V/data")
beeCounts <-read.delim(file="AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
colnames(beeCounts) <- c("NC.1", "NC.2", "NR.1", "VR.1", "NS.1", "VP.1", "NS.2", "VR.2", "NP.1", "VP.2", "VC.1", "NP.2", "VP.3", "NP.3", "VS.1", "VS.2", "VC.2", "NC.3", "VP.4", "NC.4", "NR.2", "VC.3", "VC.4", "NP.4", "VR.3", "NC.5", "VS.3", "NP.5", "VC.5", "VS.4", "NS.3", "VS.5", "VP.5", "NR.3", "NR.4", "VC.6", "NS.4", "NC.6", "NP.6", "VR.4", "NR.5", "NR.6", "NS.5", "VP.6", "NS.6", "VR.5", "VR.6", "VS.6")
data <- beeCounts[ , order(names(beeCounts))]
treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
iTreatment = which(treatment %in% c("NC","NR","VC","VR"))
rm(list=ls())
beeCounts <-read.delim(file="AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
colnames(beeCounts) <- c("NC.1", "NC.2", "NR.1", "VR.1", "NS.1", "VP.1", "NS.2", "VR.2", "NP.1", "VP.2", "VC.1", "NP.2", "VP.3", "NP.3", "VS.1", "VS.2", "VC.2", "NC.3", "VP.4", "NC.4", "NR.2", "VC.3", "VC.4", "NP.4", "VR.3", "NC.5", "VS.3", "NP.5", "VC.5", "VS.4", "NS.3", "VS.5", "VP.5", "NR.3", "NR.4", "VC.6", "NS.4", "NC.6", "NP.6", "VR.4", "NR.5", "NR.6", "NS.5", "VP.6", "NS.6", "VR.5", "VR.6", "VS.6")
data <- beeCounts[ , order(names(beeCounts))]
treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
iTreatment = which(treatment %in% c("NC","NR","VC","VR"))
View(data)
data = data[,iTreatment]
write.table(data,"pData.txt",sep="\t",row.names=TRUE)
getwd()
setwd("~/rnaseqvisualization/bigPint")
setwd("~/HoneyBeePaper/Manuscript/MakeFiguresFiles")
library(plyr)
library(ggplot2)
library(multcompView)
library(readr)
library(multcomp)
library(nlme)
d <- read_csv("day3Mortality.csv")
d <- read_csv("../../PathogenResponse/day3Mortality.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
# Note: There are 14 NC; 15 VR, VC, NR
d = d[which(d$Treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$Treatment
d$Treatment = as.factor(d$Treatment)
colnames(d)[3] = "Day3Mortality"
levels(d$Treatment) <- c('NC', 'NR', 'VC', 'VR')
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
mortcomp = lme(Day3Mortality ~ Diet*Virus, data=d, random = ~1|Experiment)
mortcomp2 = lme(Day3Mortality ~ Treatment, data=d, random = ~1|Experiment)
anova(mortcomp)
summary(glht(mortcomp2, linfct=mcp(Treatment="Tukey")))
# Mortality (All)
labelDF = data.frame(plot.labels=c("NR","VC","VR","NC"), labels = c("ab","bc","c","a"), V1 = c(0.22, 0.479, 0.793, 0.164))
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate") + theme_gray() + ylim(0,0.8) + theme(text=element_text(size=20))
# Mortality (N vs V)
labelDF = data.frame(plot.labels=c("N","V"), labels = c("a","b"), V1 = c(0.22, 0.52))
plotMortality2 = ggplot(d, aes(x=Virus, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + theme_gray() + ylim(0,0.8) +theme(axis.title.y=element_blank(), text=element_text(size=20))
# Mortality (R vs C)
labelDF = data.frame(plot.labels=c("C","R"), labels = c("a","b"), V1 = c(0.48, 0.54))
plotMortality3 = ggplot(d, aes(x=Diet, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + theme_gray() + ylim(0,0.8)+theme(axis.title.y=element_blank(), text=element_text(size=20))
d <- read_csv("logIAPV.csv")
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$treatment = as.factor(d$treatment)
colnames(d)[3] = "logIAPV"
rm(list=ls())
getwd()
d <- read_csv("../../PathogenResponse/day3Mortality.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
# Note: There are 14 NC; 15 VR, VC, NR
d = d[which(d$Treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$Treatment
d$Treatment = as.factor(d$Treatment)
colnames(d)[3] = "Day3Mortality"
levels(d$Treatment) <- c('NC', 'NR', 'VC', 'VR')
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
mortcomp = lme(Day3Mortality ~ Diet*Virus, data=d, random = ~1|Experiment)
mortcomp2 = lme(Day3Mortality ~ Treatment, data=d, random = ~1|Experiment)
anova(mortcomp)
summary(glht(mortcomp2, linfct=mcp(Treatment="Tukey")))
# Mortality (All)
labelDF = data.frame(plot.labels=c("NR","VC","VR","NC"), labels = c("ab","bc","c","a"), V1 = c(0.22, 0.479, 0.793, 0.164))
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate") + theme_gray() + ylim(0,0.8) + theme(text=element_text(size=20))
# Mortality (N vs V)
labelDF = data.frame(plot.labels=c("N","V"), labels = c("a","b"), V1 = c(0.22, 0.52))
plotMortality2 = ggplot(d, aes(x=Virus, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + theme_gray() + ylim(0,0.8) +theme(axis.title.y=element_blank(), text=element_text(size=20))
# Mortality (R vs C)
labelDF = data.frame(plot.labels=c("C","R"), labels = c("a","b"), V1 = c(0.48, 0.54))
plotMortality3 = ggplot(d, aes(x=Diet, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + theme_gray() + ylim(0,0.8)+theme(axis.title.y=element_blank(), text=element_text(size=20))
plotMortality
plotMortality2
plotMortality3
dev.off()
dev.off()
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$treatment = as.factor(d$treatment)
str(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
str(d)
attr(d, "spec") <- NULL
str(d)
View(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
str(d)
d = as.data.frame(d)
attr(d, "spec") <- NULL
str(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
str(d)
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$treatment = as.factor(d$treatment)
colnames(d)[3] = "logIAPV"
levels(d$treatment) <- c('NC', 'NR', 'VC', 'VR')
colnames(d)[1] <- "Treatment"
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
mortcomp = lme(logIAPV ~ Diet*Virus, data=d, random = ~1|Experiment)
mortcomp2 = lme(logIAPV ~ Treatment, data=d, random = ~1|Experiment)
d$Diet = as.factor(d$Diet)
mortcomp = lme(logIAPV ~ Diet*Virus, data=d, random = ~1|Experiment)
mortcomp2 = lme(logIAPV ~ Treatment, data=d, random = ~1|Experiment)
str(d)
d$Treatment
str(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
str(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
str(d)
View(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
str(d)
d <- read_csv("../../PathogenResponse/logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
str(d)
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
str(d)
d$treatment = as.factor(d$treatment)
str(d)
colnames(d)[3] = "logIAPV"
levels(d$treatment) <- c('NC', 'NR', 'VC', 'VR')
colnames(d)[1] <- "Treatment"
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
mortcomp = lme(logIAPV ~ Diet*Virus, data=d, random = ~1|Experiment)
mortcomp2 = lme(logIAPV ~ Treatment, data=d, random = ~1|Experiment)
anova(mortcomp)
summary(glht(mortcomp2, linfct=mcp(Treatment="Tukey")))
# IAPV (All)
labelDF = data.frame(plot.labels=c("NR","VC","VR","NC"), labels = c("a","ab","b","a"), V1 = c(4.25, 5.35, 8.57, 3.85))
plotIAPV = ggplot(d, aes(x=Treatment, y=logIAPV)) + geom_boxplot(fill="paleturquoise2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) + ylab("Log IAPV Titer") +theme_gray() + theme(text=element_text(size=20)) + ylim(2,9)
# IAPV (N vs V)
labelDF = data.frame(plot.labels=c("N","V"), labels = c("a","b"), V1 = c(4.3, 8.7))
plotIAPV2 = ggplot(d, aes(x=Virus, y=logIAPV)) + geom_boxplot(fill="paleturquoise2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) +theme_gray() + theme(axis.title.y=element_blank(), text=element_text(size=20)) +ylim(2,9)
# IAPV (R vs C)
labelDF = data.frame(plot.labels=c("C","R"), labels = c("a","a"), V1 = c(4.3, 8.7))
plotIAPV3 = ggplot(d, aes(x=Diet, y=logIAPV)) + geom_boxplot(fill="paleturquoise2") + geom_text(data = labelDF, size = 8, aes(x = plot.labels, y = V1, label = labels)) +theme_gray() + theme(axis.title.y=element_blank(), text=element_text(size=20)) +ylim(2,9)
# Produce plots
plotIAPV
plotIAPV2
plotIAPV3
dev.off()
dev.off()
rm(list=ls())
getwd()
library(rtracklayer)
library(Rsamtools)
library(grid)
library(GenomicAlignments)
library(ggplot2)
library(GGally)
library(edgeR)
library(stringr)
library(EDASeq)
library(dplyr)
library(matrixStats)
library(gridExtra)
library(reshape2)
library(scales)
library(bigPint)
library(matrixStats)
getPCP <- function(nC){
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
###########################
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotData = data[,c(9,1:6)]
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
saveRDS(xNames, file=paste0("Sig_", nC,"_", i,".Rds"))
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1], alpha=0.15) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Standardized Count") + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, hjust=1))
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
ggBP = ggplot(sbsDF, aes(x=Cluster, y=FDR)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot(outlier.shape=NA, aes(fill=Cluster), alpha = 0.3) +
geom_point(aes(fill=Cluster), shape=21, position=position_jitter(width=0.3), alpha=0.5) +
scale_fill_manual(values=colList[c(2:length(colList), 1)])
jpeg(file = paste(getwd(), "/", outDir, "/", currPair, "_boxplot_", nC, ".jpg", sep=""), width=1000, height=700)
ggBP
invisible(dev.off())
jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""), width=1000, height=700)
p = do.call("grid.arrange", c(plot_clusters, ncol=ceiling(nC/2)))
invisible(dev.off())
}
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
metricsAll <- readRDS("../../Galbraith/DESeq2/dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data <- as.data.frame(readRDS("../Galbraith/DESeq2/data.Rds"))
data <- as.data.frame(readRDS("../Galbraith/DESeq2/data.Rds"))
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
fileName = paste(getwd(), "/", outDir, "/", currPair, "_dendogram.jpg", sep="")
jpeg(fileName)
plot(hc, main="data Dendogram", xlab=NA, sub=NA)
invisible(dev.off())
getPCP(4)
rm(list=ls())
getwd()
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
dataMetrics <- readRDS("../../Galbraith/DESeq2/dataMetrics.Rds")
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
??mutate
library(dplyr)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
logData = data
logData[,-1] <- log(data[,-1]+1)
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
str(data)
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
str(dat)
str(data)
rownames(data)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(7,1:6)]
str(datas)
colnames(datas) = c("ID, colnames(data))
colnames(datas) = c("ID", colnames(data))
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(7,1:6)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
str(datas)
str(dataMetrics)
plotClusters(data=data, dataMetrics = dataMetrics, threshVar = "padj")
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj")
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
dataMetrics <- readRDS("../../Galbraith/DESeq2/dataMetrics.Rds")
data <- log(data+1)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(7,1:6)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj")
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj", clusterAllData = FALSE)
data <- as.data.frame(readRDS("../../Galbraith/DESeq2/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(7,1:6)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj", clusterAllData = FALSE)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList = scales::hue_pal()(5)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj", clusterAllData = FALSE, colList = colList)
colList
colList = colList[2:5]
plotClusters(data=datas, dataMetrics = dataMetrics, threshVar = "padj", clusterAllData = FALSE, colList = colList)
