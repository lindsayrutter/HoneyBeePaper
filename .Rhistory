tolerance <- readRDS("../ResistanceTolerance/tolerance.Rds")
resistance <- readRDS("../ResistanceTolerance/resistance.Rds")
data <- readRDS("../N_V/data/data.Rds")
rutterAll <- rownames(data)
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
# Only 8764 of the 15,314 Rutter BeeBase IDs are in the conversion table
geneTable <- geneTable[which(geneTable$BeeBase %in% rutterAll),]
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
###########################################################
# Boxplot background Data
backBoxForager <- johnson[which(johnson$Entrez %in% geneTable$Entrez),2:ncol(johnson)]
backBoxForager <- backBoxForager[,grep("Forager", colnames(backBoxForager), ignore.case=TRUE)]
Antenna <- as.numeric(unlist(backBoxForager[,grep("Antenna", colnames(backBoxForager), ignore.case=TRUE)]))
Ganglia <- as.numeric(unlist(backBoxForager[,grep("Ganglia", colnames(backBoxForager), ignore.case=TRUE)]))
Hypopharyngeal <- as.numeric(unlist(backBoxForager[,grep("Hypopharyngeal", colnames(backBoxForager), ignore.case=TRUE)]))
Mandibular <- as.numeric(unlist(backBoxForager[,grep("Mandibular", colnames(backBoxForager), ignore.case=TRUE)]))
Midgut <- as.numeric(unlist(backBoxForager[,grep("Midgut", colnames(backBoxForager), ignore.case=TRUE)]))
Malpighian <- as.numeric(unlist(backBoxForager[,grep("Malpighian", colnames(backBoxForager), ignore.case=TRUE)]))
Muscle <- as.numeric(unlist(backBoxForager[,grep("Muscle", colnames(backBoxForager), ignore.case=TRUE)]))
Nasonov <- as.numeric(unlist(backBoxForager[,grep("Nasonov", colnames(backBoxForager), ignore.case=TRUE)]))
Sting <- as.numeric(unlist(backBoxForager[,grep("Sting", colnames(backBoxForager), ignore.case=TRUE)]))
Brain <- as.numeric(unlist(backBoxForager[,grep("Brain", colnames(backBoxForager), ignore.case=TRUE)]))
backBoxForager2 <- data.frame(Antenna=Antenna, Ganglia=Ganglia, Hypopharyngeal=Hypopharyngeal, Mandibular=Mandibular, Midgut=Midgut, Malpighian=Malpighian, Muscle=Muscle, Nasonov=Nasonov, Sting=Sting, Brain=Brain)
backBoxForager <- melt(backBoxForager2)
colnames(backBoxForager) <- c("Tissue", "Count")
backBoxForager$Count <- log(backBoxForager$Count + 1)
backBoxForager$Cluster <- "allData"
totalClusterBox = data.frame()
i=1
clusterVec = c("noninfected", "infected", "chestnut", "rockrose", "tolerance", "resistance")
for (cluster in clusterVec){
geneCluster <- geneTable[which(geneTable$BeeBase %in% get(cluster)),]
colnames(geneCluster)[2] = "Entrez"
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
johnsonCluster[,2:ncol(johnsonCluster)] <- as.data.frame(sapply(johnsonCluster[,2:ncol(johnsonCluster)], as.numeric))
# Boxplot foreground cluster
clusterBox <- johnsonCluster[,2:ncol(johnsonCluster)]
clusterBox <- clusterBox[,grep("Forager", colnames(clusterBox), ignore.case=TRUE)]
Antenna <- as.numeric(unlist(clusterBox[,grep("Antenna", colnames(clusterBox), ignore.case=TRUE)]))
Ganglia <- as.numeric(unlist(clusterBox[,grep("Ganglia", colnames(clusterBox), ignore.case=TRUE)]))
Hypopharyngeal <- as.numeric(unlist(clusterBox[,grep("Hypopharyngeal", colnames(clusterBox), ignore.case=TRUE)]))
Mandibular <- as.numeric(unlist(clusterBox[,grep("Mandibular", colnames(clusterBox), ignore.case=TRUE)]))
Midgut <- as.numeric(unlist(clusterBox[,grep("Midgut", colnames(clusterBox), ignore.case=TRUE)]))
Malpighian <- as.numeric(unlist(clusterBox[,grep("Malpighian", colnames(clusterBox), ignore.case=TRUE)]))
Muscle <- as.numeric(unlist(clusterBox[,grep("Muscle", colnames(clusterBox), ignore.case=TRUE)]))
Nasonov <- as.numeric(unlist(clusterBox[,grep("Nasonov", colnames(clusterBox), ignore.case=TRUE)]))
Sting <- as.numeric(unlist(clusterBox[,grep("Sting", colnames(clusterBox), ignore.case=TRUE)]))
Brain <- as.numeric(unlist(clusterBox[,grep("Brain", colnames(clusterBox), ignore.case=TRUE)]))
clusterBox2 <- data.frame(Antenna=Antenna, Ganglia=Ganglia, Hypopharyngeal=Hypopharyngeal, Mandibular=Mandibular, Midgut=Midgut, Malpighian=Malpighian, Muscle=Muscle, Nasonov=Nasonov, Sting=Sting, Brain=Brain)
clusterBox <- melt(clusterBox2)
colnames(clusterBox) <- c("Tissue", "Count")
clusterBox$Cluster <- c(clusterVec[i])
clusterBox$Count <- log(clusterBox$Count + 1)
totalClusterBox = rbind(totalClusterBox, clusterBox)
i=i+1
}
TissueVec <- c("Antenna", "Ganglia", "Hypopharyngeal", "Mandibular", "Midgut", "Malpighian", "Muscle", "Nasonov", "Sting", "Brain")
heatmapDat <- data.frame()
i=1
for (tissue in TissueVec){
tissueBox = data.frame()
tissueBox = rbind(tissueBox, backBoxForager[which(backBoxForager$Tissue==tissue),])
tissueBox = rbind(tissueBox, totalClusterBox[which(totalClusterBox$Tissue==tissue),])
tissueBox$Cluster = as.factor(tissueBox$Cluster)
kruskal.test(Count ~ Cluster, data = tissueBox)
output <- pairwise.wilcox.test(tissueBox$Count, tissueBox$Cluster, p.adjust.method = "BH")
heatmapDat <- rbind(heatmapDat, data.frame(levels(tissueBox$Cluster)[-1], TissueVec[i], output[[3]][1:6]))
png(paste0(TissueVec[i], '_Foragers.jpg'))
print({
ggplot(tissueBox, aes(x = Cluster, y = Count)) + geom_boxplot() + theme(axis.text.x=element_text(angle=90)) +labs(title=TissueVec[i])
})
dev.off()
i=i+1
}
str(heatmapDat)
colnames(heatmapDat) <- c("Group", "Tissue", "pvalue")
h <- ggplot(heatmapDat, aes(Group, Tissue )) + geom_tile(aes(fill = pvalue), color = "white") + scale_fill_gradient(low = "black", high = "white", trans = "log") + theme(legend.title = element_text(size = 10), legend.text = element_text(size = 12), plot.title = element_text(size=16), axis.title=element_text(size=14,face="bold"), axis.text.x = element_text(angle = 90, hjust = 1)) + labs(fill = "kruskalPvalue") + ggtitle("Foragers")
png(paste0('Heatmap_Forager.jpg'))
print({
h
})
dev.off()
rm(list=ls())
noninfected <- readRDS("../N_V/DESeq2/RDN.Rds")
infected <- readRDS("../N_V/DESeq2/RDV.Rds")
chestnut <- readRDS("../C_R/DESeq2/RDC.Rds")
rockrose <- readRDS("../C_R/DESeq2/RDR.Rds")
tolerance <- readRDS("../ResistanceTolerance/tolerance.Rds")
resistance <- readRDS("../ResistanceTolerance/resistance.Rds")
data <- readRDS("../N_V/data/data.Rds")
rutterAll <- rownames(data)
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
# Only 8764 of the 15,314 Rutter BeeBase IDs are in the conversion table
geneTable <- geneTable[which(geneTable$BeeBase %in% rutterAll),]
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
###########################################################
# Boxplot background Data
backBoxNurse <- johnson[which(johnson$Entrez %in% geneTable$Entrez),2:ncol(johnson)]
backBoxNurse <- backBoxNurse[,grep("Nurse", colnames(backBoxNurse), ignore.case=TRUE)]
Antenna <- as.numeric(unlist(backBoxNurse[,grep("Antenna", colnames(backBoxNurse), ignore.case=TRUE)]))
Ganglia <- as.numeric(unlist(backBoxNurse[,grep("Ganglia", colnames(backBoxNurse), ignore.case=TRUE)]))
Hypopharyngeal <- as.numeric(unlist(backBoxNurse[,grep("Hypopharyngeal", colnames(backBoxNurse), ignore.case=TRUE)]))
Mandibular <- as.numeric(unlist(backBoxNurse[,grep("Mandibular", colnames(backBoxNurse), ignore.case=TRUE)]))
Midgut <- as.numeric(unlist(backBoxNurse[,grep("Midgut", colnames(backBoxNurse), ignore.case=TRUE)]))
Malpighian <- as.numeric(unlist(backBoxNurse[,grep("Malpighian", colnames(backBoxNurse), ignore.case=TRUE)]))
Muscle <- as.numeric(unlist(backBoxNurse[,grep("Muscle", colnames(backBoxNurse), ignore.case=TRUE)]))
Nasonov <- as.numeric(unlist(backBoxNurse[,grep("Nasonov", colnames(backBoxNurse), ignore.case=TRUE)]))
Sting <- as.numeric(unlist(backBoxNurse[,grep("Sting", colnames(backBoxNurse), ignore.case=TRUE)]))
Brain <- as.numeric(unlist(backBoxNurse[,grep("Brain", colnames(backBoxNurse), ignore.case=TRUE)]))
backBoxNurse2 <- data.frame(Antenna=Antenna, Ganglia=Ganglia, Hypopharyngeal=Hypopharyngeal, Mandibular=Mandibular, Midgut=Midgut, Malpighian=Malpighian, Muscle=Muscle, Nasonov=Nasonov, Sting=Sting, Brain=Brain)
backBoxNurse <- melt(backBoxNurse2)
colnames(backBoxNurse) <- c("Tissue", "Count")
backBoxNurse$Count <- log(backBoxNurse$Count + 1)
backBoxNurse$Cluster <- "allData"
totalClusterBox = data.frame()
i=1
clusterVec = c("noninfected", "infected", "chestnut", "rockrose", "tolerance", "resistance")
for (cluster in clusterVec){
geneCluster <- geneTable[which(geneTable$BeeBase %in% get(cluster)),]
colnames(geneCluster)[2] = "Entrez"
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
johnsonCluster[,2:ncol(johnsonCluster)] <- as.data.frame(sapply(johnsonCluster[,2:ncol(johnsonCluster)], as.numeric))
# Boxplot foreground cluster
clusterBox <- johnsonCluster[,2:ncol(johnsonCluster)]
clusterBox <- clusterBox[,grep("Nurse", colnames(clusterBox), ignore.case=TRUE)]
Antenna <- as.numeric(unlist(clusterBox[,grep("Antenna", colnames(clusterBox), ignore.case=TRUE)]))
Ganglia <- as.numeric(unlist(clusterBox[,grep("Ganglia", colnames(clusterBox), ignore.case=TRUE)]))
Hypopharyngeal <- as.numeric(unlist(clusterBox[,grep("Hypopharyngeal", colnames(clusterBox), ignore.case=TRUE)]))
Mandibular <- as.numeric(unlist(clusterBox[,grep("Mandibular", colnames(clusterBox), ignore.case=TRUE)]))
Midgut <- as.numeric(unlist(clusterBox[,grep("Midgut", colnames(clusterBox), ignore.case=TRUE)]))
Malpighian <- as.numeric(unlist(clusterBox[,grep("Malpighian", colnames(clusterBox), ignore.case=TRUE)]))
Muscle <- as.numeric(unlist(clusterBox[,grep("Muscle", colnames(clusterBox), ignore.case=TRUE)]))
Nasonov <- as.numeric(unlist(clusterBox[,grep("Nasonov", colnames(clusterBox), ignore.case=TRUE)]))
Sting <- as.numeric(unlist(clusterBox[,grep("Sting", colnames(clusterBox), ignore.case=TRUE)]))
Brain <- as.numeric(unlist(clusterBox[,grep("Brain", colnames(clusterBox), ignore.case=TRUE)]))
clusterBox2 <- data.frame(Antenna=Antenna, Ganglia=Ganglia, Hypopharyngeal=Hypopharyngeal, Mandibular=Mandibular, Midgut=Midgut, Malpighian=Malpighian, Muscle=Muscle, Nasonov=Nasonov, Sting=Sting, Brain=Brain)
clusterBox <- melt(clusterBox2)
colnames(clusterBox) <- c("Tissue", "Count")
clusterBox$Cluster <- c(clusterVec[i])
clusterBox$Count <- log(clusterBox$Count + 1)
totalClusterBox = rbind(totalClusterBox, clusterBox)
i=i+1
}
TissueVec <- c("Antenna", "Ganglia", "Hypopharyngeal", "Mandibular", "Midgut", "Malpighian", "Muscle", "Nasonov", "Sting", "Brain")
heatmapDat <- data.frame()
i=1
for (tissue in TissueVec){
tissueBox = data.frame()
tissueBox = rbind(tissueBox, backBoxNurse[which(backBoxNurse$Tissue==tissue),])
tissueBox = rbind(tissueBox, totalClusterBox[which(totalClusterBox$Tissue==tissue),])
tissueBox$Cluster = as.factor(tissueBox$Cluster)
kruskal.test(Count ~ Cluster, data = tissueBox)
output <- pairwise.wilcox.test(tissueBox$Count, tissueBox$Cluster, p.adjust.method = "BH")
heatmapDat <- rbind(heatmapDat, data.frame(levels(tissueBox$Cluster)[-1], TissueVec[i], output[[3]][1:6]))
png(paste0(TissueVec[i], '_Nurses.jpg'))
print({
ggplot(tissueBox, aes(x = Cluster, y = Count)) + geom_boxplot() + theme(axis.text.x=element_text(angle=90)) +labs(title=TissueVec[i])
})
dev.off()
i=i+1
}
colnames(heatmapDat) <- c("Group", "Tissue", "pvalue")
h <- ggplot(heatmapDat, aes(Group, Tissue )) + geom_tile(aes(fill = pvalue), color = "white") + scale_fill_gradient(low = "black", high = "white", trans = "log") + theme(legend.title = element_text(size = 10), legend.text = element_text(size = 12), plot.title = element_text(size=16), axis.title=element_text(size=14,face="bold"), axis.text.x = element_text(angle = 90, hjust = 1)) + labs(fill = "kruskalPvalue") + ggtitle("Nurses")
png(paste0('Heatmap_Nurse.jpg'))
print({
h
})
dev.off()
setwd("~/thesis")
ls
rm(list=ls())
dev.off()
library(rtracklayer)
library(Rsamtools)
library(grid)
library(GenomicAlignments)
library(ggplot2)
library(GGally)
library(edgeR)
library(stringr)
library(EDASeq)
library(dplyr)
library(matrixStats)
library(gridExtra)
library(reshape2)
library(scales)
library(bigPint)
library(matrixStats)
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/ClusterStandard")
metricsAll <- readRDS("../dataMetrics.Rds")
getwd()
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$padj<0.05),]
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
nC=4
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
saveRDS(xNames, file=paste0("Sig_", nC,"_", i,".Rds"))
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1], alpha=0.15) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count") + theme(text = element_text(size=20), axis.text.x = element_text(angle=90, hjust=1))
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
str(ret)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
library(bigPint)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
i=1
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
str(plotDatas)
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
dev.off()
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
str(ret)
ret
str(dat)
str(plotData)
str(data)
ret <- plotDEG(data = data, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
str(plotDatas)
plotData = data[,c(9,1:6)]
ret <- plotDEG(data = plotData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
ret
str(plotData)
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
ret <- plotDEG(data = plotData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
ret
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2")
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/scatMat")
#i=1
metricsAll <- readRDS("../dataMetrics.Rds")
rm(list=ls())
#i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
metrics <- metricsAll[[currPair]]
#metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
#data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
logData = data
logData[,-1] <- log(data[,-1]+1)
plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1])
plotScatterStatic(logData)
dev.off()
dev.off()
plotScatterStatic(logData)
getwd()
plotScatterStatic(logData, option="point")
dev.off()
plotScatterStatic(logData, option="point")
getwd()
ret <- plotScatterStatic(logData, option="point")
ret
ret <- plotScatterStatic(logData, option="point", pointSize=0.5)
ret
dev.off()
dev.off()
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2")
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/scatMat")
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../data.Rds"))
logData = data
logData[,-1] <- log(data[,-1]+1)
plotScatterStatic(logData, pointSize=0.5, option="point")
plotScatterStatic(data = logData, pointSize=0.5, option="point")
plotScatterStatic(data = logData, pointSize=0.5, option="point", outDir=getwd())
library(bigPint)
plotScatterStatic(data = logData, pointSize=0.5, option="point", outDir=getwd())
rm(list=ls())
data <- as.data.frame(readRDS("../data.Rds"))
head(data)
str(data)
str(logData)
logData = data
logData[,-1] <- log(data[,-1]+1)
str(logData)
data$ID <- rownames(logData)
str(logData)
logData$ID <- rownames(logData)
str(logData)
logData <- logData(,c(7,1:6))
logData <- logData[,c(7,1:6)]
str(logData)
plotScatterStatic(data = logData, pointSize=0.5, option="point", outDir=getwd())
ret <- plotScatterStatic(data = logData, pointSize=0.5, option="point", outDir=getwd())
ret
dev.off()
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(7,1:6)]
ret <- plotScatterStatic(data = logData, pointSize=0.5, option="point")
ret
dev.off()
getwd()
data <- as.data.frame(readRDS("../../../V_C/DESeq2/data.Rds"))
data <- as.data.frame(readRDS("../../../N_V/DESeq2/data.Rds"))
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/scatMat")
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../../N_V/DESeq2/data.Rds"))
str(data)
logData <- log(data+1)
logData$ID <- rownames(logData)
str(logData)
logData <- logData[,c(25,1:24)]
s
str(logData)
logDataSub <- logData[,c(1,2:4, 14:16)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
dev.off()
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../../N_V/DESeq2/data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(25,1:24)]
logDataSub <- logData[,c(1,2:4, 14:16)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
logDataSub <- logData[,c(1,5:7, 17:19)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
logDataSub <- logData[,c(1,8:10, 20:22)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
logDataSub <- logData[,c(1,11:13, 23:25)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
dev.off()
dev.off()
data <- as.data.frame(readRDS("../data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(7,1:6)]
ret <- plotScatterStatic(data = logData, pointSize=0.5, option="point")
ret
dev.off()
dev.off()
rm(list=ls())
data <- as.data.frame(readRDS("../data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(7,1:6)]
# scatMatGalbraith.png
ret <- plotScatterStatic(data = logData, pointSize=0.5, option="point")
plotScatterStatic(data = logData, pointSize=0.5, option="orthogonal")
plotScatterStatic(data = logData, pointSize=0.5, option="foldChange")
plotScatterStatic(data = logData, pointSize=0.5, threshFC=3, option="foldChange")
plotScatterStatic(data = logData, pointSize=0.5, option="prediction")
plotScatterStatic(data = logData, pointSize=0.5, piLevel =0.99, option="prediction")
plotScatterStatic(data = logData, pointSize=0.5, piLevel =0.9999, option="prediction")
# scatMatGalbraith.png
ret <- plotScatterStatic(data = logData, pointSize=0.1, option="point")
rm(list=ls())
data <- as.data.frame(readRDS("../data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(7,1:6)]
# scatMatGalbraith.png
ret <- plotScatterStatic(data = logData, pointSize=0.1, option="point")
ret
dev.off()
dev.off()
dev.off()
ret
dev.off()
dev.off()
rm(list=ls())
data <- as.data.frame(readRDS("../../../N_V/DESeq2/data.Rds"))
logData <- log(data+1)
logData$ID <- rownames(logData)
logData <- logData[,c(25,1:24)]
logDataSub <- logData[,c(1,2:4, 14:16)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.5, option="point")
ret
dev.off()
dev.off()
ret <- plotScatterStatic(data = logDataSub, pointSize=0.1, option="point")
ret
logDataSub <- logData[,c(1,5:7, 17:19)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.1, option="point")
ret
logDataSub <- logData[,c(1,8:10, 20:22)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.1, option="point")
ret
logDataSub <- logData[,c(1,11:13, 23:25)]
ret <- plotScatterStatic(data = logDataSub, pointSize=0.1, option="point")
ret
dev.off()
dev.off()
