label1 = as.character(length(which(plotVirus$Group=="virus1")))
label2 = as.character(length(which(plotVirus$Group=="virus2")))
label3 = as.character(length(which(plotVirus$Group=="virus3")))
label4 = as.character(length(which(plotVirus$Group=="virus4")))
label1
label2
labelDF = data.frame(plot.labels=c("virus1","virus2","virus3","virus4","data"), labels = c(label1,label2,label3,label4,length(which(plotVirus$Group=="data"))), V1 = rep(0.7,5))
ggplot(plotVirus, aes(x=Group, y=R2_IAPV)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab("R2 with IAPV titers") + theme_gray()
label1 = c(as.character(length(which(plotVirus$Group=="virus1"))), as.character(output[[3]][4]))
label2 = as.character(length(which(plotVirus$Group=="virus2")))
label3 = as.character(length(which(plotVirus$Group=="virus3")))
label4 = as.character(length(which(plotVirus$Group=="virus4")))
labelDF = data.frame(plot.labels=c("virus1","virus2","virus3","virus4","data"), labels = c(label1,label2,label3,label4,length(which(plotVirus$Group=="data"))), V1 = rep(0.7,5))
label1 = paste0(as.character(length(which(plotVirus$Group=="virus1"))), as.character(output[[3]][4]))
label1
label1 = paste0(as.character(length(which(plotVirus$Group=="virus1"))), "\n", as.character(output[[3]][4]))
label1
label1 = paste0(as.character(length(which(plotVirus$Group=="virus1"))), "\n", as.character(output[[3]][4]))
label2 = as.character(length(which(plotVirus$Group=="virus2")))
label3 = as.character(length(which(plotVirus$Group=="virus3")))
label4 = as.character(length(which(plotVirus$Group=="virus4")))
labelDF = data.frame(plot.labels=c("virus1","virus2","virus3","virus4","data"), labels = c(label1,label2,label3,label4,length(which(plotVirus$Group=="data"))), V1 = rep(0.7,5))
ggplot(plotVirus, aes(x=Group, y=R2_IAPV)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab("R2 with IAPV titers") + theme_gray()
label1
output[[3]][4]
signif(output[[3]][4],3)
label1 = paste0(as.character(length(which(plotVirus$Group=="virus1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(plotVirus$Group=="virus2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(plotVirus$Group=="virus3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(plotVirus$Group=="virus4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("virus1","virus2","virus3","virus4","data"), labels = c(label1,label2,label3,label4,length(which(plotVirus$Group=="data"))), V1 = rep(0.6,5))
ggplot(plotVirus, aes(x=Group, y=R2_IAPV)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab("R2 with IAPV titers") + theme_gray()
labelDF = data.frame(plot.labels=c("virus1","virus2","virus3","virus4","data"), labels = c(label1,label2,label3,label4,length(which(plotVirus$Group=="data"))), V1 = rep(0.5,5))
ggplot(plotVirus, aes(x=Group, y=R2_IAPV)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab("R2 with IAPV titers") + theme_gray()
dev.off()
dev.off()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
rm(list=ls())
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
dev.off()
dev.off()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
type = "BLN"
dataBTN <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
dataBTN = as.data.frame(dataBTN)
functionRT(data=dataBTN, type=type)
type = "Log"
dataLog <- log(data+1)
functionRT(data=dataLog, type=type)
type = "Standardize"
# Next lines to standardize
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
colData <- colnames(data)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(data)), stdev=rowSds(as.matrix(data)))
data$mean <- as.numeric(data$mean)
datas <- t(apply(as.matrix(data[,1:(ncol(data)-2)]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colData
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$NC.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,] <- 0
functionRT(data=datas, type=type)
rm(list=ls())
dev.off()
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
View(Variables)
as.data.frame(Variables[,5])[,1]
rm(list=ls())
dev.off()
getwd()
source("functionRT_Mort.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
type = "BLN"
dataBTN <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
dataBTN = as.data.frame(dataBTN)
functionRT(data=dataBTN, type=type)
type = "Log"
dataLog <- log(data+1)
functionRT(data=dataLog, type=type)
type = "Standardize"
# Next lines to standardize
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
colData <- colnames(data)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(data)), stdev=rowSds(as.matrix(data)))
data$mean <- as.numeric(data$mean)
datas <- t(apply(as.matrix(data[,1:(ncol(data)-2)]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colData
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$NC.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,] <- 0
functionRT(data=datas, type=type)
rm(list=ls())
dev.off()
source("functionRT_Mort.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
type = "BLN"
dataBTN <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
dataBTN = as.data.frame(dataBTN)
functionRT(data=dataBTN, type=type)
type = "Log"
dataLog <- log(data+1)
functionRT(data=dataLog, type=type)
type = "Standardize"
# Next lines to standardize
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
colData <- colnames(data)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(data)), stdev=rowSds(as.matrix(data)))
data$mean <- as.numeric(data$mean)
datas <- t(apply(as.matrix(data[,1:(ncol(data)-2)]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colData
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$NC.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,] <- 0
functionRT(data=datas, type=type)
rm(list=ls())
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
varSBV <- as.data.frame(Variables[,6])[,1]
varSBV
rm(list=ls())
source("functionRT_SBV.R")
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
type = "Raw"
functionRT(data=data, type=type)
type = "BLN"
dataBTN <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
dataBTN = as.data.frame(dataBTN)
functionRT(data=dataBTN, type=type)
type = "Log"
dataLog <- log(data+1)
functionRT(data=dataLog, type=type)
type = "Standardize"
# Next lines to standardize
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
colData <- colnames(data)
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(data)), stdev=rowSds(as.matrix(data)))
data$mean <- as.numeric(data$mean)
datas <- t(apply(as.matrix(data[,1:(ncol(data)-2)]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colData
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$NC.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,] <- 0
functionRT(data=datas, type=type)
library(GGally)
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
str(data)
rm(list=ls())
dev.off()
getwd()
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
str(Variables)
str(as.data.frame(Variables[,6]))
str(as.data.frame(Variables))
attr(Variables)
attributes(Variables)
attributes(Variables) <- NULL
str(Variables)
Variables <- as.data.frame(Variables)
str(Variables)
rm(list=ls())
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
str(Variables)
attributes(Variables) <- NULL
str(Variables)
str(unlist(Variables))
str(as.matrix(Variables))
str(unlist(Variables))
str(as.matrix(unlist(Variables)))
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
str(as.data.frame(Variables))
Variables <- as.data.frame(Variables)
attributes(Variables) <- NULL
str(Variables)
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
Variables <- as.data.frame(Variables)
str(Variables)
str(Variables[[1]])
str(Variables)
attributes(Variables) <- NULL
str(Variables)
rm(list=ls())
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
attributes(Variables) <- NULL
str(Variables)
output <- matrix(unlist(Variables), ncol = 9, byrow = TRUE)
str(output)
View(output)
output <- matrix(unlist(Variables), ncol = 9)
str(output)
View(output)
output <- as.data.frame(output)
str(output)
str(Variables)
colnames(Variables)
str(Variables)
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
str(Variables)
colnames(Variables)
ColNames <- colnames(Variables)
attributes(Variables) <- NULL
output <- matrix(unlist(Variables), ncol = 9)
output <- as.data.frame(output)
str(output)
colnames(output) <- ColNames
str(output)
str(Variables)
output$SampleOrig <- as.integer(output$SampleOrig)
str(Variables)
str(Output)
str(output)
output <- matrix(unlist(Variables), ncol = 9)
output <- as.data.frame(output)
colnames(output) <- ColNames
str(output)
output[,1] <- as.integer(output[$SampleOrig[,1])
output[,1] <- as.integer(output[,1])
str(output)
str(Variables)
output[,2] <- as.character(output[,2])
str(output)
str(Variables)
output[,3] <- as.character(output[,3])
output[,4] <- as.integer(output[,4])
output[,5] <- as.numeric(output[,5])
output[,6] <- as.numeric(output[,6])
output[,7] <- as.numeric(output[,7])
output[,8] <- as.integer(output[,8])
output[,9] <- as.numeric(output[,9])
str(output)
ggpairs(output[,5:9])
str(output[,5:9])
ggpairs(output[,5:7])
ggpairs(output[,c(5:7,9)])
output[,8] <- as.numeric(output[,8])
ggpairs(output[,c(5:9)])
ggpairs(output[,c(5:7)])
dev.off()
dev.off()
ls()
ls()
rm(list=ls())
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
View(data)
library(readr)
getwd()
setwd("~/HoneyBeePaper/Tissues")
am_gene_info <- read_csv("am.gene_info.csv")
View(am_gene_info)
??read_csv
am_gene_info <- read_csv("am.gene_info.csv", header=FALSE)
View(am_gene_info)
am_gene_info <- read_csv("am.gene_info.csv", col_names=FALSE)
View(am_gene_info)
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
View(geneTable)
temp <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
i=1
temp <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
str(temp)
colnames(geneTable)[6] = "BeeBase"
which("GB" %in% geneTable$BeeBase)
head(geneTable$BeeBase)
str(geneTable$BeeBase)
grep("GB", geneTable$BeeBase, value=TRUE)
length(grep("GB", geneTable$BeeBase, value=TRUE))
length(geneTable$BeeBase)
which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE))
geneTable2 <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
View(geneTable2)
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
head(geneTable$BeeBase)
unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
length(temp)
which(temp %in% geneTable$BeeBase)
which(geneTable$BeeBase %in% temp)
length(which(temp %in% geneTable$BeeBase))
length(which(geneTable$BeeBase %in% temp))
length(temp)
geneTemp <- geneTable[which(geneTable$BeeBase %in% temp),]
View(geneTemp)
setwd("~/HoneyBeePaper/Tissues")
library(readxl)
dataset <- read_excel("Table_S1.xlsx", col_names = FALSE)
View(dataset)
View(johnson)
johnson <- read_excel("Table_S1.xlsx")
View(johnson)
johnson[2,]
johnson[1,]
johnson[3,]
johnson[4,]
ncol(johnson)
johnson[2,1:61]
johnson[1,1:61]
johnson[3,1:61]
johnson[4,1:61]
johnson[4,1:10]
johnson[1,1:10]
johnson[2,1:10]
as.data.frame(johnson[2,1:10])
as.data.frame(johnson[2,])
str(as.data.frame(johnson[2,]))
str(names(as.data.frame(johnson[2,])))
names(as.data.frame(johnson[2,]))
values(as.data.frame(johnson[2,]))
str(names(as.data.frame(johnson[2,])))
str(as.data.frame(johnson[2,]))
unlist(as.data.frame(johnson[2,]))
levels(as.data.frame(johnson[2,]))
unlist(as.data.frame(johnson[2,]))
str(unlist(as.data.frame(johnson[2,])))
colJohnson <- unlist(as.data.frame(johnson[2,]))
str(colJohnson)
attributes(colJohnson) <- NULL
str(colJohnson)
View(geneTemp)
colnames(johnson) <- colJohnson
head(johnson[1:2,])
View(johnson[1:2,])
nrow(johnson)
johnson <- johnson[3:nrow(johnson),]
View(johnson)
rm(list=ls())
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
View(geneTable)
View(geneTable)
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
i=1
temp <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
geneTemp <- geneTable[which(geneTable$BeeBase %in% temp),]
View(geneTemp)
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
View(johnson)
colnames(geneTable)[2] = "Entrez"
colnames(johnson)[1] = "Entrez"
colnames(geneTemp)[2] = "Entrez"
which(geneTemp$Entrez %in% johnson$Entrez)
which(johnson$Entrez %in% geneTemp$Entrez)
johnsonCluster <- johnson[which(johnson$Entrez %in% geneCluster$Entrez),]
rm(list=ls())
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
i=1
cluster <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
geneCluster <- geneTable[which(geneTable$BeeBase %in% cluster),]
colnames(geneCluster)[2] = "Entrez"
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
johnsonCluster <- johnson[which(johnson$Entrez %in% geneCluster$Entrez),]
View(johnsonCluster)
rm(list=ls())
a
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
i=1
cluster <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
geneCluster <- geneTable[which(geneTable$BeeBase %in% cluster),]
colnames(geneCluster)[2] = "Entrez"
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
johnsonCluster <- johnson[which(johnson$Entrez %in% geneCluster$Entrez),]
str(cluster)
str(johnsonCluster)
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
str(johnsonCluster)
str(johnson)
johnson <- read_excel("Table_S1.xlsx")
str(johnson)
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
rm(list=ls())
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
i=1
cluster <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
geneCluster <- geneTable[which(geneTable$BeeBase %in% cluster),]
colnames(geneCluster)[2] = "Entrez"
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
str(johnsonCluster)
johnsonCluster[,2:ncol(johnsonCluster)] <- as.numeric(johnsonCluster[,2:ncol(johnsonCluster)])
View(johnsonCluster[,2:ncol(johnsonCluster)])
str(johnsonCluster[,2:ncol(johnsonCluster)])
johnsonCluster[,2:ncol(johnsonCluster)] <- as.numeric(as.factor(johnsonCluster[,2:ncol(johnsonCluster)]))
str(johnsonCluster)
a = "6306"
as.numeric(a)
as.numeric(as.factor((a))
)
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
str(johnsonCluster)
str(johnsonCluster)
johnsonCluster[,2:ncol(johnsonCluster)] <- as.numeric(johnsonCluster[,2:ncol(johnsonCluster)])
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
str(johnsonCluster)
johnsonCluster[,2:ncol(johnsonCluster)] <- as.data.frame(sapply(johnsonCluster[,2:ncol(johnsonCluster)], as.numeric))
str(johnsonCluster)
dev.off()
rm(list=ls())
geneTable <- read_csv("am.gene_info.csv", col_names=FALSE)
colnames(geneTable)[2] = "Entrez"
colnames(geneTable)[6] = "BeeBase"
geneTable <- geneTable[which(geneTable$BeeBase %in% grep("GB", geneTable$BeeBase, value=TRUE)),]
geneTable$BeeBase <- unlist(lapply(geneTable$BeeBase, function (x) unlist(strsplit(x, "[:]"))[2]))
i=1
cluster <- readRDS(paste0("../ResistanceTolerance/Clustering_Tolerance/Sig_4_", i, ".Rds"))
geneCluster <- geneTable[which(geneTable$BeeBase %in% cluster),]
colnames(geneCluster)[2] = "Entrez"
johnson <- read_excel("Table_S1.xlsx")
colJohnson <- unlist(as.data.frame(johnson[2,]))
attributes(colJohnson) <- NULL
colnames(johnson) <- colJohnson
johnson <- johnson[3:nrow(johnson),]
colnames(johnson)[1] = "Entrez"
johnsonCluster <- as.data.frame(johnson[which(johnson$Entrez %in% geneCluster$Entrez),])
johnsonCluster[,2:ncol(johnsonCluster)] <- as.data.frame(sapply(johnsonCluster[,2:ncol(johnsonCluster)], as.numeric))
str(johnson)
data <- readRDS("../N_V/data/data.Rds")
str(data)
View(data)
rutterAll <- rownames(data)
str(rutterAll)
ls()
View(geneTable)
