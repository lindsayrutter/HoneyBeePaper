getwd()
setwd("~/bigPint")
document(); install(); document(); install(); library(bigPint)
setwd("~/HoneyBeePaper/Manuscript/MakeFiguresFiles")
# Read in data and dataMetrics
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(25,1:24)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
colnames(datas) <- c("ID", "N.C1", "N.C2", "N.C3", "N.C4", "N.C5", "N.C6", "N.R1", "N.R2", "N.R3", "N.R4", "N.R5", "N.R6", "V.C1", "V.C2", "V.C3", "V.C4", "V.C5", "V.C6", "V.R1", "V.R2", "V.R3", "V.R4", "V.R5", "V.R6")
# Read in geneList for tolerance genes
geneList <- readRDS("../../ResistanceTolerance/tolerance.rds")
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, threshVar = "padj", clusterAllData = TRUE, yAxisLabel = "Standardized count", saveFile = FALSE)
plot(ret[["N_V_4"]])
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", saveFile = FALSE)
dev.off()
data=datas; geneList=geneList; threshVar = "padj"; clusterAllData = FALSE; yAxisLabel = "Standardized count"; saveFile = FALSE
dataMetrics = NULL; nC = 4; threshVal=0.05; outDir=getwd(); colList = rainbow(nC); aggMethod = "ward.D"; xAxisLabel = "Sample"; lineSize = 0.1; lineAlpha = 0.5; verbose=FALSE; vxAxis = FALSE
key <- val <- ID <- rainbow <- NULL
colNames <- colnames(data)
myPairs <- unique(sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1]))
myPairs <- myPairs[-which(myPairs=="ID")]
colGroups <- sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1])
ret = list()
length(myPairs)
i=1;j=2
group1 = myPairs[i]
group2 = myPairs[j]
fData <- cbind(ID=data$ID, data[,which(colGroups %in% c(group1, group2))])
boxDat <- fData %>% gather(key, val, c(-ID))
colnames(boxDat) <- c("ID", "Sample", "Count")
userOrder <- unique(boxDat$Sample)
boxDat$Sample <- as.factor(boxDat$Sample)
levels(boxDat$Sample) <- userOrder
!is.null(dataMetrics) && is.null(geneList)
!is.null(geneList)
metricPair = data.frame(ID = data$ID, FDR = 1)
metricPair$ID = as.character(metricPair$ID)
metricPair[which(metricPair$ID %in% geneList), ]$FDR = 0.1
threshVar = "FDR"
threshVal = 0.5
dataMetrics = 1
nrow(data)>=nC && clusterAllData == TRUE
nrow(cData)>=nC && clusterAllData == FALSE
cData <- fData
nrow(cData)>=nC && clusterAllData == FALSE
dendo = cData
rownames(dendo) = NULL
d = suppressWarnings(dist(as.matrix(dendo)))
hC = hclust(d, method=aggMethod)
#colList = rainbow(nC)
k = cutree(hC, k=nC)
j=1
i = rev(order(table(k)))[j]
x = as.data.frame(cData[which(k==i),])
x$cluster = "color"
x$cluster2 = factor(x$cluster)
x$ID = factor(x$ID)
xNames = x$ID
str(xNames)
str(cData)
cData <- fData[which(fData$ID %in% geneList),]
dendo = cData
rownames(dendo) = NULL
d = suppressWarnings(dist(as.matrix(dendo)))
hC = hclust(d, method=aggMethod)
#colList = rainbow(nC)
k = cutree(hC, k=nC)
j=1
i = rev(order(table(k)))[j]
x = as.data.frame(cData[which(k==i),])
x$cluster = "color"
x$cluster2 = factor(x$cluster)
x$ID = factor(x$ID)
xNames = x$ID
str(xNames)
str(cData)
!is.null(dataMetrics)
metricFDR = metricPair[which(as.character(metricPair$ID) %in% xNames),]
sigID = metricFDR[which(metricFDR[[threshVar]]<=threshVal),]$ID
xSig = x[which(xNames %in% sigID),]
xSigNames = rownames(xSig)
nGenes = nrow(xSig)
nGenes
xSig$ID = xSigNames
keepCol = c(1, which(sapply(colnames(xSig), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(group1, group2)))
xSig = xSig[, keepCol]
pcpDat <- melt(xSig, id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
pcpDat$Sample <- as.character(pcpDat$Sample)
pcpDat$ID <- as.factor(pcpDat$ID)
p <- ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[j], alpha=lineAlpha, size = lineSize) + ylab(yAxisLabel) + xlab(xAxisLabel) + ggtitle(paste("Cluster ", j, " Genes (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + theme(plot.title = element_text(hjust = 0.5, size=14, face="plain"), axis.text=element_text(size=11), axis.title=element_text(size=14))
p
###########################
plot_clusters = lapply(1:nC, function(j){
i = rev(order(table(k)))[j]
x = as.data.frame(cData[which(k==i),])
x$cluster = "color"
x$cluster2 = factor(x$cluster)
x$ID = factor(x$ID)
xNames = x$ID
if (!is.null(dataMetrics)){
metricFDR = metricPair[which(as.character(metricPair$ID) %in% xNames),]
sigID = metricFDR[which(metricFDR[[threshVar]]<=threshVal),]$ID
xSig = x[which(xNames %in% sigID),]
xSigNames = rownames(xSig)
nGenes = nrow(xSig)
}
else{
xSig = x
xSigNames = rownames(x)
nGenes = nrow(x)
}
if (verbose==TRUE){
IDs = as.character(xNames)
saveRDS(IDs, file = paste(outDir, "/", plotName, "_", nC, "_", j, ".rds", sep=""))
}
xSig$ID = xSigNames
keepCol = c(1, which(sapply(colnames(xSig), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(group1, group2)))
xSig = xSig[, keepCol]
pcpDat <- melt(xSig, id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
pcpDat$Sample <- as.character(pcpDat$Sample)
pcpDat$ID <- as.factor(pcpDat$ID)
p <- ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[j], alpha=lineAlpha, size = lineSize) + ylab(yAxisLabel) + xlab(xAxisLabel) + ggtitle(paste("Cluster ", j, " Genes (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + theme(plot.title = element_text(hjust = 0.5, size=14, face="plain"), axis.text=element_text(size=11), axis.title=element_text(size=14))
if (vxAxis == TRUE){
p <- p + theme(axis.text.x = element_text(angle=90, hjust=1))
}
if (verbose==TRUE){
fileName = paste(outDir, "/", plotName, "_", nC, "_", j, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
}
p
})
p = arrangeGrob(grobs=plot_clusters, ncol=2)
p
plot(p)
dev.off()
dev.off()
document(); install(); document(); install(); library(bigPint)
setwd("~/bigPint")
document(); install(); document(); install(); library(bigPint)
setwd("~/HoneyBeePaper/Manuscript/MakeFiguresFiles")
getwd()
# Read in data and dataMetrics
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(25,1:24)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
colnames(datas) <- c("ID", "N.C1", "N.C2", "N.C3", "N.C4", "N.C5", "N.C6", "N.R1", "N.R2", "N.R3", "N.R4", "N.R5", "N.R6", "V.C1", "V.C2", "V.C3", "V.C4", "V.C5", "V.C6", "V.R1", "V.R2", "V.R3", "V.R4", "V.R5", "V.R6")
# Read in geneList for tolerance genes
geneList <- readRDS("../../ResistanceTolerance/tolerance.rds")
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", saveFile = FALSE)
names(ret)
plot(ret[["N_V_4"]])
dev.off()
dev.off()
# Define color vector
colList = scales::hue_pal()(5)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
colList = colList[2:5]
colnames(datas) <- c("ID", "N.C.1", "N.C.2", "N.C.3", "N.C.4", "N.C.5", "N.C.6", "N.R.1", "N.R.2", "N.R.3", "N.R.4", "N.R.5", "N.R.6", "V.C.1", "V.C.2", "V.C.3", "V.C.4", "V.C.5", "V.C.6", "V.R.1", "V.R.2", "V.R.3", "V.R.4", "V.R.5", "V.R.6")
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE)
plot(ret[["N_V_4"]])
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = heat(4), saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = terrain.colors(4), saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
terrain.colors(4)[1]
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = c("#00A600FF", "#7570B3", "#00A600FF", "#7570B3"), saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
rainbow(5)[4]
dev.off()
dev.off()
rm(list=ls())
# Read in data and dataMetrics
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(25,1:24)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
# Rename columns
colnames(datas) <- c("ID", "N.C.1", "N.C.2", "N.C.3", "N.C.4", "N.C.5", "N.C.6", "N.R.1", "N.R.2", "N.R.3", "N.R.4", "N.R.5", "N.R.6", "V.C.1", "V.C.2", "V.C.3", "V.C.4", "V.C.5", "V.C.6", "V.R.1", "V.R.2", "V.R.3", "V.R.4", "V.R.5", "V.R.6")
# Define color vector
colList = c("#00A600FF", "#7570B3", "#f97976", "#0066FFFF")
# Read in geneList for tolerance genes
geneList <- readRDS("../../ResistanceTolerance/tolerance.rds")
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
dev.off()
dev.off()
rm(list=ls())
getwd()
# Read in data and dataMetrics
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
datas = as.data.frame(t(apply(as.matrix(data), 1, scale)))
datas$ID = as.character(rownames(datas))
datas = datas[,c(25,1:24)]
colnames(datas) = c("ID", colnames(data))
nID = which(is.nan(datas[,2]))
datas[nID,2:length(datas)] = 0
# Rename columns to fit bigPint specifications
colnames(datas) <- c("ID", "N.C.1", "N.C.2", "N.C.3", "N.C.4", "N.C.5", "N.C.6", "N.R.1", "N.R.2", "N.R.3", "N.R.4", "N.R.5", "N.R.6", "V.C.1", "V.C.2", "V.C.3", "V.C.4", "V.C.5", "V.C.6", "V.R.1", "V.R.2", "V.R.3", "V.R.4", "V.R.5", "V.R.6")
# Define color vector
colList = c("#00A600FF", "#7570B3", "#f97976", "#0066FFFF")
# Read in geneList for tolerance genes
geneList <- readRDS("../../ResistanceTolerance/resistance.rds")
# Plot clusters as parallel coordinate lines
# Set verbose=TRUE to save images and .rds files of gene IDs to directory "ClusterFiles"
ret <- plotClusters(data=datas, geneList=geneList, clusterAllData = FALSE, yAxisLabel = "Standardized count", colList = colList, saveFile = FALSE, vxAxis = TRUE, lineAlpha = 1, lineSize = 0.3)
plot(ret[["N_V_4"]])
dev.off()
dev.off()
rm(list=ls())
setwd("~/bigPint")
library(devtools)
devtools::check()
packageVersion("plyr")
getwd()
devtools::check()
devtools::check()
packageVersion("rmarkdown")
devtools::check()
setwd("~/bigPint")
setwd("~/HoneyBeePaper")
readRDS("RDC.Rds")
readRDS("C_R/DESeq2/RDC.Rds")
RDC <- readRDS("C_R/DESeq2/RDC.Rds")
str(RDC)
data <- read("C_R/DESeq2/data.Rds")
data <- readRDS("C_R/DESeq2/data.Rds")
head(data)
data[which(rownames(data)) %in% RDC]
data[which(rownames(data) %in% RDC), ]
CData <- data[which(rownames(data) %in% RDC), ]
View(CData)
CData$ID <- rownames(CData)
str(CData)
data <- readRDS("C_R/DESeq2/data.Rds")
str(data)
data <- as.data.frame(data)
str(data)
CData <- data[which(rownames(data) %in% RDC), ]
CData$ID <- rownames(CData)
str(CData)
CData <- CData[,c(25, 1:24)]
str(CData)
View(CData)
write.csv(CData, "../Desktop/CData.csv")
RDC <- readRDS("C_R/DESeq2/RDR.Rds")
data <- readRDS("C_R/DESeq2/data.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDC), ]
CData$ID <- rownames(CData)
CData <- CData[,c(25, 1:24)]
str(CData)
write.csv(CData, "../Desktop/CData.csv")
setwd("~/HoneyBeePaper/N_V/DESeq2")
RDN <- readRDS("N_V/DESeq2/RDN.Rds")
data <- readRDS("N_V/DESeq2/data.Rds")
getwd()
setwd("~/HoneyBeePaper")
RDN <- readRDS("N_V/DESeq2/RDN.Rds")
data <- readRDS("N_V/DESeq2/data.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
str(CData)
CData <- CData[,c(25, 1:24)]
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("N_V/DESeq2/RDV.Rds")
data <- readRDS("N_V/DESeq2/data.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData[,c(25, 1:24)]
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/data.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData[,c(25, 1:24)]
str(CData)
library(dplyr)
cData <- cData %>% select(ID, starts_with(NR, VR))
CData <- CData %>% select(ID, starts_with(NR, VR))
CData <- CData %>% select(ID, starts_with("NR", "VR"))
CData <- CData %>% select(ID, starts_with("NR"))
str(CData)
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData[,c()]
CData <- CData %>% select(ID, starts_with("NR"), starts_with("VR"))
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NR"), starts_with("VR"))
str(CData)
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData[,c()]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NR"), starts_with("VR"))
str(Cdata)
str(CData)
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData[,c()]
CData$ID <- rownames(CData)
str(CData)
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
str(data)
CData <- data[which(rownames(data) %in% RDN), ]
str(data)
str(RDN)
CData <- data[which(rownames(data) %in% RDN), ]
str(CData)
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NR"), starts_with("VR"))
str(CData)
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VR_VR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NR"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/VC_VR_VC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("VC"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/VC_VR_VR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("VC"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NC_VR_NC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("VC"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NC_VR_NC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NC"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NC_VR_VR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NC"), starts_with("VR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/VC_NR_VC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VC_VC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("VC"), starts_with("NR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NR_VC_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("VC"), starts_with("NR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NC_NR_NC.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NC"), starts_with("NR"))
write.csv(CData, "../Desktop/CData.csv")
RDN <- readRDS("NC_NR_VC_VR/DESeq2/Method1/NC_NR_NR.Rds")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
CData <- data[which(rownames(data) %in% RDN), ]
CData$ID <- rownames(CData)
CData <- CData %>% select(ID, starts_with("NC"), starts_with("NR"))
write.csv(CData, "../Desktop/CData.csv")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
resistance <- readRDS("ResistanceTolerance/resistance.Rds")
CData <- data[which(rownames(data) %in% resistance), ]
CData$ID <- rownames(CData)
str(CData)
cData <- cData[, c(25, 1:24)]
CData <- CData[, c(25, 1:24)]
str(CData)
write.csv(CData, "../Desktop/CData.csv")
data <- readRDS("NC_NR_VC_VR/DESeq2/Method1/dataRLD.Rds")
data <- as.data.frame(data)
tolerance <- readRDS("ResistanceTolerance/tolerance.Rds")
CData <- data[which(rownames(data) %in% tolerance), ]
CData$ID <- rownames(CData)
CData <- CData[, c(25, 1:24)]
write.csv(CData, "../Desktop/CData.csv")
library(devtools)
setwd("~/bigPint")
document(); install(); document(); install(); library(bigPint)
devtools::build()
devtools::check()
document(); install(); document(); library(bigPint)
library(pkgodnw)
library(pkgdown)
build_site()
knitr::opts_chunk$set(echo=TRUE)
data("soybean_ir_sub")
data("soybean_ir_sub_metrics")
sigGenes = soybean_ir_sub_metrics[["N_P"]] %>% filter(FDR < 1e-10) %>% filter(abs(logFC) > 6)
library(dplyr)
sigGenes = soybean_ir_sub_metrics[["N_P"]] %>% filter(FDR < 1e-10) %>% filter(abs(logFC) > 6)
%>% select(ID)
ret <- plotSM(data=soybean_ir_sub, geneList = sigGenes, pointSize = 0.5, pointColor = "magenta",
saveFile = FALSE)
sigGenes = soybean_ir_sub_metrics[["N_P"]] %>% filter(FDR < 1e-10) %>% filter(abs(logFC) > 6)
sigGenes = soybean_ir_sub_metrics[["N_P"]] %>% filter(FDR < 1e-10) %>% filter(abs(logFC) > 6) %>%   select(ID)
knitr::opts_chunk$set(echo=TRUE)
ret <- plotSM(soybean_cn_sub, soybean_cn_sub_metrics, option = "foldChange", threshFC = 0.5,
pointSize = 0.2, saveFile = FALSE)
rm(list=ls())
dev.off()
document(); install(); document(); install(); library(bigPint); build_site()
getwd()
document(); install(); document(); install(); library(bigPint); build_site()
setwd("~/Desktop/Applications/JPL")
getwd()
getwd()
getwd()
setwd("~/Desktop/Applications/JPL/Presentation")
getwd()
setwd("~/Desktop/Conferences/JSM/jsmPresentation")
setwd("~/Desktop/Applications/JPL")
setwd("~/Desktop/Applications/JPL/Presentation")
setwd("~/Desktop/Applications/JPL/Presentation")
getwd()
getwd()
setwd("~/Desktop/Applications/JPL/Presentation")
setwd("~/bigPint")
setwd("~/Desktop/Applications/ASAPaper/Biometrics")
