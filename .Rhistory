label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2_IAPV)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab("R2 with IAPV titers") + theme_gray()
})
dev.off()
#PVal
}
makePlot(plotVirus, "virus")
makePlot(plotTolerance, "tolerance")
makePlot(plotResistance, "resistance")
}
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal = data.frame()
type = "Raw"
PVal <- functionRT(data=data, type=type, PVal=PVal)
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal = data.frame()
type = "Raw"
PVal <- functionRT(data=data, type=type, PVal=PVal)
source("functionRT_IAPV.R")
PVal <- functionRT(data=data, type=type, PVal=PVal)
View(PVal)
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
str(data)
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
str(Variables)
myVar <- as.data.frame(Variables[,7])[,1]
str(myVar)
View(Variables)
View(Variables)
getwd()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal = data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
source("functionRT_IAPV.R")
PVal = data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
ls()
PVal
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal = data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
source("functionRT_IAPV.R")
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
View(PVal)
PVal
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
View(PVal)
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- functionRT(data=data, type="IAPV", colNum=7)
rm(list=ls())
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal = data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
rm(list=ls())
i
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
dev.off()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
View(PVal)
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- data.frame()
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
View(PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
# Test populations are not identical not assuming normality or equal variance
kruskal.test(R2 ~ Group, data = inputR2)
rm(list=ls())
dev.off()
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
data=data; type="IAPV"; colNum=7
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
myVar <- as.data.frame(Variables[,colNum])[,1]
readFile <- c("../../N_V/DESeq2/ClusterStandard/Sig_4_", "../../ResistanceTolerance/Clustering_Tolerance/Sig_4_", "../../ResistanceTolerance/Clustering_Resistance/Sig_4_")
strVar <- c("virus", "tolerance", "resistance")
getR2 <- function(rf, sv){
dfR2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2) <- c("Group", "R2")
allR2 <- c()
for (i in 1:4){
temp <- readRDS(paste0(rf, i, ".Rds")) # different
temp2 <- data[which(rownames(data) %in% temp),]
temp3 = c()
allR2 <- c(allR2, temp)
if (nrow(temp2)>0){
for (j in 1:nrow(temp2)){
temp3[j] <- rsq(as.numeric(temp2[j,]), myVar)
}
}
dfR2 <- rbind(dfR2, data.frame(Group = rep(paste0("Cluster",i), length(temp3)), R2 = temp3))
}
dfR2Box <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2Box) <- c("Group", "R2")
dataMin <- data[-which(rownames(data) %in% allR2),]
temp3 = c()
if (nrow(dataMin)>0){
for (i in 1:nrow(dataMin)){
temp3[i] <- rsq(as.numeric(dataMin[i,]), myVar)
}
}
temp3 <- temp3[-which(is.na(temp3))]
dfR2Box <- rbind(dfR2Box, data.frame(Group = rep(paste0("data"), length(temp3)), R2 = temp3))
list(dfR2, dfR2Box)
}
virusR2 <- getR2(readFile[1], strVar[1])
plotVirus <- rbind(virusR2[[1]], virusR2[[2]])
inputR2 <- plotVirus
degGroup <- "virus"
# Test populations are not identical not assuming normality or equal variance
kruskal.test(R2 ~ Group, data = inputR2)
output <- pairwise.wilcox.test(inputR2$R2, inputR2$Group, p.adjust.method = "BH")
c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)))
c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3))
str(inputR2)
View(inputR2)
welch.test(R2 ~ Group, data = inputR2)
library(onewaytests)
install.packages("onewaytests")
library(onewaytests)
welch.test(R2 ~ Group, data = inputR2)
head(inputT2)
head(inputR2)
??welch.test
welch.test(Group ~ R2, data = inputR2)
inputR2[which(inputR2$Group=="Cluster1")]
inputR2[which(inputR2$Group=="Cluster1"),]
inputR2[which(inputR2$Group%in%c("Cluster1", "Cluster2"),]
inputR2[which(inputR2$Group %in% c("Cluster1", "Cluster2"),]
inputR2$Group %in% c("Cluster1", "Cluster2")
which(inputR2$Group %in% c("Cluster1", "Cluster2"))
inputR2[which(inputR2$Group %in% c("Cluster1", "Cluster2")),]
inputR2[which(inputR2$Group %in% c("Cluster1", "data")),]
pair1 = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),]
welch.test(pair1$R2 ~ pair1$Group, data = pair1)
welch.test(pair1$Group ~ pair1$R2, data = pair1)
head(pair1)
welch.test(Group ~ R2, data = pair1)
welch.test(R2 ~ Group, data = pair1)
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch.test(R2 ~ Group, data = pair1), welch.test(R2 ~ Group, data = pair2), welch.test(R2 ~ Group, data = pair3), welch.test(R2 ~ Group, data = pair4))))
pair2 = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),]
pair3 = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),]
pair4 = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),]
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch.test(R2 ~ Group, data = pair1), welch.test(R2 ~ Group, data = pair2), welch.test(R2 ~ Group, data = pair3), welch.test(R2 ~ Group, data = pair4))))
pair1
welch.test(R2 ~ Group, data = pair1)
welch.test(R2 ~ Group, data = pair1)[1]
welch.test(R2 ~ Group, data = pair1)[[1]]
welch.test(R2 ~ Group, data = pair1)[[1]][1]
welch.test(R2 ~ Group, data = pair1)[[p.value]]
welch.test(R2 ~ Group, data = pair1)[["p.value"]]
str(welch.test(R2 ~ Group, data = pair1))
welch.test(R2 ~ Group, data = pair1)[[3]]
welch.test(R2 ~ Group, data = pair1)[[1]][3]
welch.test(R2 ~ Group, data = pair1)$p.value
str(welch.test(R2 ~ Group, data = pair1))
sapply(welch.test(R2 ~ Group, data = pair1), getElement, "p.value")
myList = welch.test(R2 ~ Group, data = pair1)
str(myList)
myList[[3]]
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch1
welch1[[3]]
# Welch test
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch2 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),])
welch3 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),])
welch4 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),])
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1, welch2, welch3, welch4)))
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1[[3]], welch2[[3]], welch3[[3]], welch4[[3]])))
label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray()
PVal
rm(list=ls())
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
saveRDS(PVal, "PVal.Rds")
View(PVal)
PVAl
PVal
colnames(PVal)
PVal$Method
View(PVal)
write.csv(PVal)
rm(list=ls())
dev.off()
getwd()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
setwd("~/HoneyBeePaper/ResistanceTolerance/KruskalWelch")
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
source("functionRT_IAPV.R")
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
source("functionRT_IAPV.R")
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
rm(list=ls())
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
rm(list=ls())
dev.off()
dev.off()
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
rm(list=ls())
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
type="IAPV"; colNum=7
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
myVar <- as.data.frame(Variables[,colNum])[,1]
readFile <- c("../../N_V/DESeq2/ClusterStandard/Sig_4_", "../../ResistanceTolerance/Clustering_Tolerance/Sig_4_", "../../ResistanceTolerance/Clustering_Resistance/Sig_4_")
strVar <- c("virus", "tolerance", "resistance")
getR2 <- function(rf, sv){
dfR2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2) <- c("Group", "R2")
allR2 <- c()
for (i in 1:4){
temp <- readRDS(paste0(rf, i, ".Rds")) # different
temp2 <- data[which(rownames(data) %in% temp),]
temp3 = c()
allR2 <- c(allR2, temp)
if (nrow(temp2)>0){
for (j in 1:nrow(temp2)){
temp3[j] <- rsq(as.numeric(temp2[j,]), myVar)
}
}
dfR2 <- rbind(dfR2, data.frame(Group = rep(paste0("Cluster",i), length(temp3)), R2 = temp3))
}
dfR2Box <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2Box) <- c("Group", "R2")
dataMin <- data[-which(rownames(data) %in% allR2),]
temp3 = c()
if (nrow(dataMin)>0){
for (i in 1:nrow(dataMin)){
temp3[i] <- rsq(as.numeric(dataMin[i,]), myVar)
}
}
temp3 <- temp3[-which(is.na(temp3))]
dfR2Box <- rbind(dfR2Box, data.frame(Group = rep(paste0("data"), length(temp3)), R2 = temp3))
list(dfR2, dfR2Box)
}
virusR2 <- getR2(readFile[1], strVar[1])
plotVirus <- rbind(virusR2[[1]], virusR2[[2]])
inputR2 = plotVirus
degGroup = "virus"
# Kruskal test
kruskal.test(R2 ~ Group, data = inputR2)
output <- pairwise.wilcox.test(inputR2$R2, inputR2$Group, p.adjust.method = "BH")
# Welch test
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch2 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),])
welch3 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),])
welch4 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),])
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1[[3]], welch2[[3]], welch3[[3]], welch4[[3]])))
label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size=6, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray() + theme(axis.text=element_text(size=16), axis.title=element_text(size=16))
dev.off()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
type="SBV"; colNum=6
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
myVar <- as.data.frame(Variables[,colNum])[,1]
readFile <- c("../../N_V/DESeq2/ClusterStandard/Sig_4_", "../../ResistanceTolerance/Clustering_Tolerance/Sig_4_", "../../ResistanceTolerance/Clustering_Resistance/Sig_4_")
strVar <- c("virus", "tolerance", "resistance")
getR2 <- function(rf, sv){
dfR2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2) <- c("Group", "R2")
allR2 <- c()
for (i in 1:4){
temp <- readRDS(paste0(rf, i, ".Rds")) # different
temp2 <- data[which(rownames(data) %in% temp),]
temp3 = c()
allR2 <- c(allR2, temp)
if (nrow(temp2)>0){
for (j in 1:nrow(temp2)){
temp3[j] <- rsq(as.numeric(temp2[j,]), myVar)
}
}
dfR2 <- rbind(dfR2, data.frame(Group = rep(paste0("Cluster",i), length(temp3)), R2 = temp3))
}
dfR2Box <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2Box) <- c("Group", "R2")
dataMin <- data[-which(rownames(data) %in% allR2),]
temp3 = c()
if (nrow(dataMin)>0){
for (i in 1:nrow(dataMin)){
temp3[i] <- rsq(as.numeric(dataMin[i,]), myVar)
}
}
temp3 <- temp3[-which(is.na(temp3))]
dfR2Box <- rbind(dfR2Box, data.frame(Group = rep(paste0("data"), length(temp3)), R2 = temp3))
list(dfR2, dfR2Box)
}
virusR2 <- getR2(readFile[1], strVar[1])
plotVirus <- rbind(virusR2[[1]], virusR2[[2]])
inputR2 <- plotVirus
degGroup <- "virus"
png(paste0(degGroup, type, '.jpg'))
# Kruskal test
kruskal.test(R2 ~ Group, data = inputR2)
output <- pairwise.wilcox.test(inputR2$R2, inputR2$Group, p.adjust.method = "BH")
# Welch test
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch2 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),])
welch3 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),])
welch4 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),])
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1[[3]], welch2[[3]], welch3[[3]], welch4[[3]])))
label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size=6, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray() + theme(axis.text=element_text(size=16), axis.title=element_text(size=16))
dev.off()
dev.off()
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size=6, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray() + theme(axis.text=element_text(size=16), axis.title=element_text(size=16))
rm(ist=ls())
rm(list=ls())
dev.off()
dev.off()
dev.off()
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
dev.off()
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
dev.off()
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
dev.off()
dev.off()
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
dev.off()
rm(list=ls())
source("functionRT_IAPV.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
dev.off()
PVal <- functionRT(data=data, type="SBV", colNum=6, PVal=PVal)
dev.off()
PVal <- functionRT(data=data, type="Mortality", colNum=5, PVal=PVal)
setwd("~/Desktop/GenomeBiology")
setwd("~/Desktop/GenomeBiology/bmc_template")
setwd("~/HoneyBeePaper/N_V/DESeq2")
thisPath <- getwd()
data <- readRDS("../data/data.Rds")
data <- as.matrix(data)
coldata = data.frame(row.names = colnames(data), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
dds <- DESeq(dds)
library(DESeq2)
library(DESeq2)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(gplots)
library(DESeq2)
library(RColorBrewer)
library(data.table)
library(ggplot2)
library(gplots)
library(GGally)
thisPath <- getwd()
data <- readRDS("../data/data.Rds")
data <- as.matrix(data)
coldata = data.frame(row.names = colnames(data), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
dds <- DESeq(dds)
uTreat <- unique(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
allPairs = data.frame(Treatment1 = factor(), Treatment2 = factor(), NumberDEG = numeric())
dataMetrics <- list()
for (i in 1:(length(uTreat)-1)){
for (j in (i+1):length(uTreat)){
res <- results(dds, contrast=c("treatment",uTreat[i],uTreat[j]))
hist(res$pvalue, breaks=20, col="grey", main=paste("pvalue for", uTreat[i], "and", uTreat[j]))
degLength <- length(which((res@listData)$padj <0.05))
metrics = as.data.frame(res@listData)
metrics = cbind(ID = res@rownames, metrics)
metrics$ID = as.character(metrics$ID)
dataMetrics[[paste0(uTreat[i], "_", uTreat[j])]] <- metrics
t1Length <- length(which(metrics[which(metrics$padj <0.05),]$log2FoldChange>0))
t2Length <- length(which(metrics[which(metrics$padj <0.05),]$log2FoldChange<0))
sigMetrics <- metrics[which(metrics$padj <0.05),]
RDN <- sigMetrics[which(sigMetrics$log2FoldChange>0),]$ID
RDV <- sigMetrics[which(sigMetrics$log2FoldChange<0),]$ID
RD_VIRUS_TOTAL <- metrics[which(metrics$padj <0.05),]$ID
saveRDS(RDV, file="RDV.Rds")
saveRDS(RDN, file="RDN.Rds")
saveRDS(RD_VIRUS_TOTAL, file="RD_VIRUS_TOTAL.Rds")
allPairs = rbind(allPairs, data.frame(Treatment1 = uTreat[i], Treatment2 = uTreat[j], NumberDEG = degLength, Treatment1Larger = t1Length, Treatment2Larger = t2Length))
}
}
allPairs <- allPairs[order(allPairs$NumberDEG),]
allPairs
plotDispEsts(dds, ylim = c(1e-6, 1e1))
rld <- rlog(dds)
rld <- rlog(dds)
rldDF <- as.data.frame(assay(rld))
sampleDists <- dist(t(assay(rld)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(rld$treatment, rld$patient, sep="-")
colnames(sampleDistMatrix) <- NULL
colours = colorRampPalette(rev(brewer.pal(9, "Blues")))(255)
heatmap.2(sampleDistMatrix, trace="none", col=colours)
print(plotPCA(rld, intgroup="treatment") + geom_label(aes(label = name), label.size=0.001))
setwd("~/Desktop/GenomeBiology/bmc_template")
dev.off()
rm(list=ls())
setwd("~/HoneyBeePaper")
