dev.off()
dat <- readRDS("data.Rds")
dat$ID <- rownames(dat)
dat <- dat[,c(25,1:24)]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("Sigmetrics.rda")
myMetrics <- colnames(metrics[[1]])[-which(colnames(metrics[[1]]) %in% "ID")]
values <- reactiveValues(x=0, selPair=NULL, selMetric=NULL, selOrder=NULL)
shiny::runApp()
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1")
rm(list=ls())
dev.off()
dev.off()
dat <- readRDS("data.Rds")
dat$ID <- rownames(dat)
dat <- dat[,c(7,1:6)]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("SigCluster1.rda")
myMetrics <- colnames(metrics[[1]])[-which(colnames(metrics[[1]]) %in% "ID")]
runApp()
myMetrics
str(myMetrics)
sampleIndex <- reactive(which(sapply(colnames(dat), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(input$selPair[1], input$selPair[2])))
sampleIndex
sampleIndex <- which(sapply(colnames(dat), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(input$selPair[1], input$selPair[2]))
sampleIndex <- which(sapply(colnames(dat), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(selPair[1], selPair[2]))
selPair=c("C","T")
sampleIndex <- which(sapply(colnames(dat), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(selPair[1], selPair[2]))
sampleIndex
metricDF <- metrics[[paste0(input$selPair[1], "_", input$selPair[2])]]
metricDF <- metrics[[paste0(selPair[1], "_", selPair[2])]]
str(metricDF)
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1")
runApp()
runApp()
dat <- readRDS("data.Rds")
str(dat)
View(dat)
dat$ID <- rownames(dat)
View(dat)
View(dat)
str(dat)
dat <- readRDS("data.Rds")
str(dat)
dat <- as.data.frame(dat)
str(dat)
dat$ID <- rownames(dat)
dat <- dat[,c(7,1:6)]
rm(list=ls())
runApp()
getwd()
dat <- readRDS("data.Rds")
dat <- as.data.frame(dat)
dat$ID <- rownames(dat)
dat <- dat[,c(7,1:6)]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("SigCluster1.rda")
myMetrics <- colnames(metrics[[1]])[-which(colnames(metrics[[1]]) %in% "ID")]
myMetrics
load("SigCluster1.rda")
ls()
rm(list=ls())
load("SigCluster1.rda")
ls()
str(metrics)
metrics[[1]]
names(metrics[[1]])
str(metrics)
metrics[1]
metrics[[1]]
metrics[[1]]
str(metrics)
names(metrics)
rm(list=ls())
dev.off()
dev.off()
runApp()
runApp()
runApp()
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1")
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster2")
rm(list=ls())
runApp()
runApp()
setwd("~/HoneyBeePaper/N_V/DESeq2/Dashboard/litreSig")
runApp()
setwd("~/HoneyBeePaper/VirusHoneyBee/DESeq2/ClusterStandard")
rm(list=ls())
dev.off()
dev.off()
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$padj<0.05),]
saveRDS(sigDatas$ID, file="Sig.Rds")
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
getwd()
rm(list=ls())
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$padj<0.05),]
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
str(metrics)
View(data)
View(metrics)
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
saveRDS(sigDatas$ID, file="Sig.Rds")
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
fileName = paste(getwd(), "/", outDir, "/", currPair, "_dendogram.jpg", sep="")
jpeg(fileName)
plot(hc, main="data Dendogram", xlab=NA, sub=NA)
invisible(dev.off())
nC=4
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
i=1
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
str(x)
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotData = data[,c(9,1:6)]
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
ret
et
ret
i=2
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotData = data[,c(9,1:6)]
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
str(plotDatas)
plot(x)
str(x)
i=3
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotData = data[,c(9,1:6)]
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
i=4
j = rev(order(table(k)))[i]
x = as.data.frame(sigDatas[which(k==j),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotData = data[,c(9,1:6)]
plotData[,c(2:7)] <- log(plotData[,c(2:7)] +1)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
dev.off()
rm(list=ls())
getwd()
setwd("~/HoneyBeePaper/N_V/DESeq2/ClusterStandard")
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data <- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
xNames = rownames(sigDatas)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
plotDatas2 = plotDatas[,c(1,11:13,23:25)]
logData2 = logData[,c(1,11:13,23:25)]
ret <- plotDEG(data = logData2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
str(plotDatas2)
str(scatMatMetrics)
readIn <- readRDS("Sig_4_1.Rds")
ls()
cluster <- readRDS("Sig_4_1.Rds")
cluster
View(plotDatas2)
which(cluster %in% plotDatas2$ID)
which(plotDatas2$ID %in% cluster)
plotDatas2[which(plotDatas2$ID %in% cluster),]
plotDatas2 <- plotDatas2[which(plotDatas2$ID %in% cluster),]
plotDatas2 = plotDatas[,c(1,11:13,23:25)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
plotDatas2 = plotDatas[,c(1,2:4,14:16)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
rm(list=ls())
dev.off()
dev.off()
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data <- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
xNames = rownames(sigDatas)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
cluster <- readRDS("Sig_4_1.Rds")
plotDatas <- plotDatas[which(plotDatas2$ID %in% cluster),]
plotDatas <- plotDatas[which(plotDatas$ID %in% cluster),]
plotDatas2 = plotDatas[,c(1,2:4,14:16)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
str(scatMatMetrics)
scatMatMetrics <- scatMatMetrics[which(scatMatMetrics$ID %in% cluster),]
cluster <- readRDS("Sig_4_1.Rds")
plotDatas2 = plotDatas[,c(1,2:4,14:16)]
scatMatMetrics <- scatMatMetrics[which(scatMatMetrics$ID %in% cluster),]
scatMatMetrics$ID
str(scatMatMetrics)
scatMatMetrics <- scatMatMetrics[which(scatMatMetric["N_V"]s$ID %in% cluster),]
scatMatMetrics <- scatMatMetrics[which(scatMatMetrics["N_V"]$ID %in% cluster),]
scatMatMetrics["N_V"]
str(scatMatMetrics["N_V"])
scatMatMetrics["N_V"][ID]
scatMatMetrics[["N_V"]][ID]
scatMatMetrics[["N_V"]]$ID
scatMatMetrics <- scatMatMetrics[which(scatMatMetrics[["N_V"]]$ID %in% cluster),]
str(scatMatMetrics[["N_V"]]$ID)
which(scatMatMetrics[["N_V"]]$ID %in% cluster)
scatMatMetrics[["N_V"]] <- scatMatMetrics[["N_V"]][which(scatMatMetrics[["N_V"]]$ID %in% cluster),]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
str(plotDatas2)
rm(list=ls())
dev.off()
dev.off()
set.seed(1)
colList = scales::hue_pal()(nC+1)
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data <- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
xNames = rownames(sigDatas)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
cluster <- readRDS("Sig_4_1.Rds")
plotDatas2 = plotDatas[,c(1,2:4,14:16)]
scatMatMetrics[["N_V"]] <- scatMatMetrics[["N_V"]][which(scatMatMetrics[["N_V"]]$ID %in% cluster),]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
str(scatMatMetrics)
plotDatas2 = plotDatas[,c(1,5:7,17:19)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
plotDatas2 = plotDatas[,c(1,8:10,20:22)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
plotDatas2 = plotDatas[,c(1,11:13,23:25)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "#C11B8D")
ret
