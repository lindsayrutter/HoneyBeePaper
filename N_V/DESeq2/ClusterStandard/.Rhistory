d$Treatment
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
head(d)
str(d)
d$Diet = as.factor(d$Diet)
a <- aov(Day3Mortality~Treatment, data=d)
a <- aov(Day3Mortality~Treatment, data=d)
aov.out = aov(Day3Mortality ~ Virus * Diet, data=d)
a
summary(a)
summary(aov.out)
ls()
str(d)
aov.out
summary(aov.out)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
tHSD
rm(list=ls())
d <- read_csv("logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$treatment = as.factor(d$treatment)
colnames(d)[2] = "logIAPV"
levels(d$treatment) <- c('NC', 'NR', 'VC', 'VR')
colnames(d)[1] <- "Treatment"
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
str(d)
a <- aov(logIAPV~Treatment, data=d)
aov.out = aov(logIAPV ~ Virus * Diet, data=d)
a
summary(a)
summary(aov.out)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
tHSD
setwd("~/Desktop/HoneyBeePaper/Overlaps")
rm(list=ls())
GDV <- readRDS("../VirusHoneyBee/DESeq2/GDV.Rds")
str(GDV)
GDC <- readRDS("../VirusHoneyBee/DESeq2/GDC.Rds")
str(GDC)
"GB41545" %in% GDV
"GB41545" %in% GDC
"GB48755" %in% GDV
"GB50178" %in% GDV
"GB47407" %in% GDV
"GB42313" %in% GDV
"GB50955" %in% GDV
"GB50813" %in% GDV
"GB54503" %in% GDV
"GB53500" %in% GDV
"GB54503" %in% GDC
"GB51305" %in% GDV
"GB51305" %in% GDC
getwd()
rm(list=ls())
dev.off()
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1Stand')
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1Stand')
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1')
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Dashboard/litreSigStand")
runApp()
runApp('~/Desktop/HoneyBeePaper/N_V/DESeq2/Dashboard/litreSig')
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1')
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/makeClusterData")
rm(list=ls())
library(bigPint)
ID <- readRDS("../../ClusterStandard/Sig_4_2.Rds")
metricsAll <- readRDS("../../dataMetrics.Rds")
allMetrics = metricsAll[["C_T"]]
metricsCluster <- allMetrics[which(allMetrics$ID %in% ID),]
metricsCluster$ID <- as.character(metricsCluster$ID)
metrics <- list()
metrics[["C_T"]] <- metricsCluster
save(metrics, file = "SigCluster2.rda")
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1')
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster2')
rm(list=ls())
dat <- readRDS("data.Rds")
dat$ID <- rownames(dat)
getwd()
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster2")
dat <- readRDS("data.Rds")
dat$ID <- rownames(dat)
dat <- dat[,c(7,1:6)]
dat[,-1] <- log(dat[,-1]+1)
datCol <- colnames(dat)[-which(colnames(dat) %in% "ID")]
myPairs <- unique(sapply(datCol, function(x) unlist(strsplit(x,"[.]"))[1]))
load("SigCluster2.rda")
ls()
str(metrics)
runApp('~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Dashboard/litreCluster1')
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/ClusterStandard")
rm(list=ls())
dev.off()
dev.off()
colList = scales::hue_pal()(nC+1)
colList = scales::hue_pal()(4+1)
colList
getPCP <- function(nC){
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "E9AA0D"
colList[3] = "EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
###########################
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
saveRDS(xNames, file=paste0("Sig_", nC,"_", i,".Rds"))
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1], alpha=0.15) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count")
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
ggBP = ggplot(sbsDF, aes(x=Cluster, y=FDR)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot(outlier.shape=NA, aes(fill=Cluster), alpha = 0.3) +
geom_point(aes(fill=Cluster), shape=21, position=position_jitter(width=0.3), alpha=0.5) +
scale_fill_manual(values=colList[c(2:length(colList), 1)])
jpeg(file = paste(getwd(), "/", outDir, "/", currPair, "_boxplot_", nC, ".jpg", sep=""), width=1000, height=700)
ggBP
invisible(dev.off())
jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""), width=1000, height=700)
p = do.call("grid.arrange", c(plot_clusters, ncol=ceiling(nC/2)))
invisible(dev.off())
}
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$padj<0.05),]
saveRDS(sigDatas$ID, file="Sig.Rds")
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
fileName = paste(getwd(), "/", outDir, "/", currPair, "_dendogram.jpg", sep="")
jpeg(fileName)
plot(hc, main="data Dendogram", xlab=NA, sub=NA)
invisible(dev.off())
getPCP(4)
getPCP <- function(nC){
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
###########################
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
saveRDS(xNames, file=paste0("Sig_", nC,"_", i,".Rds"))
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1], alpha=0.15) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count")
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
ggBP = ggplot(sbsDF, aes(x=Cluster, y=FDR)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot(outlier.shape=NA, aes(fill=Cluster), alpha = 0.3) +
geom_point(aes(fill=Cluster), shape=21, position=position_jitter(width=0.3), alpha=0.5) +
scale_fill_manual(values=colList[c(2:length(colList), 1)])
jpeg(file = paste(getwd(), "/", outDir, "/", currPair, "_boxplot_", nC, ".jpg", sep=""), width=1000, height=700)
ggBP
invisible(dev.off())
jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""), width=1000, height=700)
p = do.call("grid.arrange", c(plot_clusters, ncol=ceiling(nC/2)))
invisible(dev.off())
}
getPCP(4)
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/ClusterStandard")
nC=4
set.seed(1)
colList = scales::hue_pal()(nC+1)
colList[2] = "#E9AA0D"
colList[3] = "#EA502F"
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
i=1
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret
ls()
str(ret)
ret[["C_T"]]
dev.off()
dev.off()
ret[["C_T"]]
dev.off()
ret[["C_T"]]
dev.off()
dev.off()
i=2
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
i=2
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
dev.off()
i=3
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
i=4
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
dev.off()
ret[["C_T"]]
dev.off()
str(data)
str(logData)
plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret <- plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
dev.off()
i=1
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
dev.off()
i
i=2
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
dev.off()
i
i=3
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = logData, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
ret[["C_T"]]
i
dev.off()
rm(list=ls())
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/ClusterStandard")
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
xNames = rownames(sigDatas)
str(xNames)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
str(plotDatas)
colList[i]
ret <- plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, fileName=fileName)
str(scatMatMetrics)
str(plotDatas)
data = plotDatas; dataMetrics = scatMatMetrics; pointSize=1;degPointColor="orange"; threshVar = "padj"; threshVal = 0.05; fileName=fileName
counts <- hexID <- ID <- NULL
colNames <- colnames(data)
myPairs <- unique(sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1]))
myPairs <- myPairs[-which(myPairs=="ID")]
colGroups <- sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1])
ifelse(!dir.exists(outDir), dir.create(outDir), FALSE)
maxVal = max(data[,-1])
minVal = min(data[,-1])
maxRange = c(minVal, maxVal)
# Utility function
my_fn <- function(data, mapping, degData...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point(size = pointSize) + geom_abline(intercept = 0, color = "red", size = 0.5) + coord_cartesian(xlim = c(maxRange[1], maxRange[2]), ylim = c(maxRange[1], maxRange[2])) + geom_point(data = degData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color = degPointColor, size = pointSize)
p
}
ret = list()
length(myPairs)
i=1;j=2
group1 = myPairs[i]
group2 = myPairs[j]
datSel <- cbind(ID=data$ID, data[,which(colGroups %in% c(group1, group2))])
group1
group2
str(datSel)
rowDEG1 <- which(dataMetrics[[paste0(group1,"_",group2)]][threshVar] < threshVal)
str(rowDEG1)
rowDEG2 <- which(dataMetrics[[paste0(group2,"_",group1)]][threshVar] < threshVal)
str(rowDEG2)
rowDEG <- c(rowDEG1, rowDEG2)
str(rowDEG)
degID1 <- as.character(dataMetrics[[paste0(group1,"_",group2)]][rowDEG,]$ID)
degID2 <- as.character(dataMetrics[[paste0(group2,"_",group1)]][rowDEG,]$ID)
degID <- c(degID1, degID2)
str(degID)
degData <- datSel[which(datSel$ID %in% degID),]
str(degData)
ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
dev.off()
