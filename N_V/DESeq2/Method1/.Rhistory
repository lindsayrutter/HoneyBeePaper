logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$padj<0.05),]
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
sigDatas
head(metricsAll[["C_T"]])
dev.off()
rm(list=ls())
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["C_T"]]$adj.P.Val<0.05),]
dendo = sigDatas
rownames(dendo) = NULL
d = dist(as.matrix(dendo))
hc = hclust(d, method="ward.D")
plotName = currPair
outDir = "Clustering_data_FDR_05"
fileName = paste(getwd(), "/", outDir, "/", currPair, "_dendogram.jpg", sep="")
jpeg(fileName)
plot(hc, main="data Dendogram", xlab=NA, sub=NA)
invisible(dev.off())
getPCP <- function(nC){
set.seed(1)
colList = scales::hue_pal()(nC+1)
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
###########################
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "adj.P.Val", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1]) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count")
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
ggBP = ggplot(sbsDF, aes(x=Cluster, y=FDR)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot(outlier.shape=NA, aes(fill=Cluster), alpha = 0.3) +
geom_point(aes(fill=Cluster), shape=21, position=position_jitter(width=0.3), alpha=0.5) +
scale_fill_manual(values=colList[c(2:length(colList), 1)])
jpeg(file = paste(getwd(), "/", outDir, "/", currPair, "_boxplot_", nC, ".jpg", sep=""), width=1000, height=700)
ggBP
invisible(dev.off())
jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""), width=1000, height=700)
p = do.call("grid.arrange", c(plot_clusters, ncol=ceiling(nC/2)))
invisible(dev.off())
}
sigDatas
nrow(sigDatas)
getPCP(4)
i=1
x = as.data.frame(sigDatas[which(k==i),])
x = as.data.frame(sigDatas[which(k==i),])
nC=4
set.seed(1)
colList = scales::hue_pal()(nC+1)
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
i=1
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "adj.P.Val", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
i=2
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "adj.P.Val", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
data = plotDatas; dataMetrics = scatMatMetrics; option="scatterPoints"; threshVar = "adj.P.Val"; threshVal = 0.05; degPointColor = colList[i+1]; fileName=fileName
pointSize=0.1
outDir=getwd()
getwd()
outDir=paste0(getwd(),"/Clustering_data_FDR_05")
outDir
counts <- hexID <- ID <- NULL
colNames <- colnames(data)
myPairs <- unique(sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1]))
myPairs <- myPairs[-which(myPairs=="ID")]
colGroups <- sapply(colNames, function(x) unlist(strsplit(x,"[.]"))[1])
ifelse(!dir.exists(outDir), dir.create(outDir), FALSE)
maxVal = max(data[,-1])
minVal = min(data[,-1])
maxRange = c(minVal, maxVal)
# Utility function
my_fn <- function(data, mapping, degData...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point(size = pointSize) + geom_abline(intercept = 0, color = "red", size = 0.5) + coord_cartesian(xlim = c(maxRange[1], maxRange[2]), ylim = c(maxRange[1], maxRange[2])) + geom_point(data = degData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color = degPointColor, size = pointSize)
p
}
ret = list()
i=1
j=2
group1 = myPairs[i]
group2 = myPairs[j]
datSel <- cbind(ID=data$ID, data[,which(colGroups %in% c(group1, group2))])
rowDEG1 <- which(dataMetrics[[paste0(group1,"_",group2)]][threshVar] < threshVal)
rowDEG2 <- which(dataMetrics[[paste0(group2,"_",group1)]][threshVar] < threshVal)
rowDEG <- c(rowDEG1, rowDEG2)
degID1 <- as.character(dataMetrics[[paste0(group1,"_",group2)]][rowDEG,]$ID)
degID2 <- as.character(dataMetrics[[paste0(group2,"_",group1)]][rowDEG,]$ID)
degID <- c(degID1, degID2)
degData <- datSel[which(datSel$ID %in% degID),]
fileName = paste0(outDir, "/", group1, "_", group2, "_deg_scatterPoints_", threshVar, "_", threshVal, ".jpg")
fileName
outDir
fileName = paste(outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
fileName
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
p
str(degData)
group1 = myPairs[i]
group2 = myPairs[j]
datSel <- cbind(ID=data$ID, data[,which(colGroups %in% c(group1, group2))])
rowDEG1 <- which(dataMetrics[[paste0(group1,"_",group2)]][threshVar] < threshVal)
rowDEG2 <- which(dataMetrics[[paste0(group2,"_",group1)]][threshVar] < threshVal)
rowDEG <- c(rowDEG1, rowDEG2)
rowDEG
rowDEG1 <- which(dataMetrics[[paste0(group1,"_",group2)]][threshVar] < threshVal)
rowDEG2 <- which(dataMetrics[[paste0(group2,"_",group1)]][threshVar] < threshVal)
rowDEG1
rowDEG2
head(dataMetrics[[paste0(group1,"_",group2)]])
head(dataMetrics[[paste0(group1,"_",group2)]]["threshVar"])
head(dataMetrics[[paste0(group1,"_",group2)]][threshVar])
summary(dataMetrics[[paste0(group1,"_",group2)]][threshVar])
nrow(sigDatas)
xNames
nrow(xNames)
str(xNames)
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
dev.off()
dev.off()
fileName
fileName = paste(outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
fileName
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "FDR", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
i=2
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "FDR", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
fileName
fileName = paste(outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "FDR", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
i=3
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "FDR", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
i=4
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$adj.P.Val
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "FDR", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/DESeq2")
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/DESeq2/Method2")
rm(list=ls())
data <- readRDS("../../data/data.Rds")
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/DESeq2/Method2")
data <- readRDS("../../data/data.Rds")
data <- as.matrix(data)
coldata = data.frame(row.names = colnames(data), virus = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],1,1))), diet = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],2,2))), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ virus + diet)
library(DESeq2)
library(DESeq2)
library(gplots)
library(DESeq2)
library(gplots)
library(RColorBrewer)
library(data.table)
library(ggplot2)
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ virus + diet)
str(dds)
dds <- DESeq(dds)
str(dds)
dataMetrics <- list()
res <- results(dds, contrast=c("virus","N","V"))
str(res)
res@listData
head(res@listData)
head(res@listData,10)
degLength <- length(which((res@listData)$padj <0.05))
str(degLength)
head(data)
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/DESeq2/Method1")
rm(list=ls())
data <- readRDS("../../data/data.Rds")
data <- as.matrix(data)
coldata = data.frame(row.names = colnames(data), virus = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],1,1))), diet = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],2,2))), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
dds <- DESeq(dds)
head(data)
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Method1")
rm(list=ls())
data <- readRDS("../../data/data.Rds")
data <- as.matrix(data)
head(data)
coldata = data.frame(row.names = colnames(data), virus = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],1,1))), diet = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],2,2))), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
dds <- DESeq(dds)
uTreat <- unique(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
allPairs = data.frame(Treatment1 = factor(), Treatment2 = factor(), NumberDEG = numeric())
dataMetrics <- list()
i=1;j=2
res <- results(dds, contrast=c("treatment",uTreat[i],uTreat[j]))
res@listData
setwd("~/Desktop/HoneyBeePaper/Overlaps")
setwd("~/Desktop/HoneyBeePaper/Overlaps")
library(VennDiagram)
draw.triple.venn(65, 75, 85, 35, 15, 25, 5, c("First", "Second", "Third"))
dev.off()
colList = scales::hue_pal()(4)
gDESeq = readRDS("../VirusHoneyBee/DESeq2/Method1/dataMetrics.Rds")
gDESeq = gDESeq[["C_T"]]
gD = gDESeq[which(gDESeq$padj <0.05),]$ID
gD
gEdgeR = readRDS("../VirusHoneyBee/EdgeR/edgeR/dataMetrics.Rds")
gEdgeR = gEdgeR[["C_T"]]
gE = gEdgeR[which(gEdgeR$FDR <0.05),]$ID
length(gE)
gEdgeRB = readRDS("../VirusHoneyBee/EdgeR/edgeR-btwnLane/dataMetrics.Rds")
gEdgeRB = gEdgeRB[["C_T"]]
gEB = gEdgeRB[which(gEdgeRB$FDR <0.05),]$ID
length(gEB)
gLimma = readRDS("../VirusHoneyBee/LimmaVoom/dataMetrics.Rds")
gLimma = gLimma[["C_T"]]
gL = gLimma[which(gLimma$adj.P.Val <0.05),]$ID
length(gL)
intgD = length(gD)
intgE = length(gE)
intgEB = length(gEB)
intgL = length(gL)
intgDE = length(intersect(gD, gE))
intgDEB = length(intersect(gD, gEB))
intgDL = length(intersect(gD, gL))
intgEEB = length(intersect(gE, gEB))
intgEL = length(intersect(gE, gL))
intgEBL = length(intersect(gEB, gL))
intgDEEB = length(intersect(intersect(gD, gE), gEB))
intgDEL = length(intersect(intersect(gD, gE), gL))
intgDEBL = length(intersect(intersect(gD, gEB), gL))
intgEEBL = length(intersect(intersect(gE, gEB), gL))
intgDEEBL = length(intersect(intersect(gE, gEB), intersect(gD, gL)))
fileName = paste(getwd(), "/Venn_Galbraith.jpg", sep="")
jpeg(fileName)
draw.quad.venn(add.title = "Test", area1=intgD, area2=intgE, area3=intgEB, area4=intgL, n12=intgDE, n13=intgDEB, n14=intgDL, n23=intgEEB, n24=intgEL, n34=intgEBL, n123=intgDEEB, n124=intgDEL, n134=intgDEBL, n234=intgEEBL, n1234=intgDEEBL, c("g-DESeq2", "g-EdgeR", "g-EdgeR-btwn", "g-Limma"), cat.col = colList)
invisible(dev.off())
intersect(gD, gE)
gDE = intersect(gD, gE)
gDEB = intersect(gD, gEB)
gDL = intersect(gD, gL)
gEEB = intersect(gE, gEB)
gEL = intersect(gE, gL)
gEBL = intersect(gEB, gL)
gDEEB = intersect(intersect(gD, gE), gEB)
gDEL = intersect(intersect(gD, gE), gL)
gDEBL = intersect(intersect(gD, gEB), gL)
gEEBL = intersect(intersect(gE, gEB), gL)
gDEEBL = intersect(intersect(gE, gEB), intersect(gD, gL))
intgDE = length(gDE)
intgDEB = length(gDEB)
intgDL = length(gDL)
intgEEB = length(gEEB)
intgEL = length(gEL)
intgEBL = length(gEBL)
intgDEEB = length(gDEEB)
intgDEL = length(gDEL)
intgDEBL = length(gDEBL)
intgEEBL = length(gEEBL)
intgDEEBL = length(gDEEBL)
tDESeq = readRDS("../N_V/DESeq2/Method1/dataMetrics.Rds")
tDESeq = tDESeq[["N_V"]]
tD = tDESeq[which(tDESeq$padj <0.05),]$ID
tD
tEdgeR = readRDS("../N_V/EdgeR/edgeR-Virus/dataMetrics.Rds")
tEdgeR = tEdgeR[["N_V"]]
tEdgeR = readRDS("../N_V/EdgeR/edgeR-Virus/dataMetrics.Rds")
tDESeq = readRDS("../N_V/DESeq2/Method1/dataMetrics.Rds")
tDESeq = tDESeq[["N_V"]]
tD = tDESeq[which(tDESeq$padj <0.05),]$ID
tEdgeR = readRDS("../N_V/edgeR/edgeR-Virus/dataMetrics.Rds")
tEdgeR = readRDS("../N_V/EdgeR/edgeR/dataMetrics.Rds")
tEdgeR = tEdgeR[["N_V"]]
tE = tEdgeR[which(tEdgeR$FDR <0.05),]$ID
tE
tEdgeRB = readRDS("../NC_NR_VC_VR/EdgeR/edgeR-btwnLane/dataMetrics.Rds")
tEdgeRB = tEdgeRB[["N_V"]]
tEB = tEdgeRB[which(tEdgeRB$FDR <0.05),]$ID
tEB
tEdgeRB
tEdgeRB = readRDS("../N_V/EdgeR/edgeR-btwnLane/dataMetrics.Rds")
tEdgeRB = tEdgeRB[["N_V"]]
tEB = tEdgeRB[which(tEdgeRB$FDR <0.05),]$ID
tEB
tLimma = readRDS("../N_V/LimmaVoom/dataMetrics.Rds")
tLimma = tLimma[["N_V"]]
tL = tLimma[which(tLimma$adj.P.Val <0.05),]$ID
tL
inttD = length(tD)
inttE = length(tE)
inttEB = length(tEB)
inttL = length(tL)
inttEBL = length(intersect(tEB, tL))
inttEBL
tDE = intersect(tD, tE)
tDEB = intersect(tD, tEB)
tDL = intersect(tD, tL)
tEEB = intersect(tE, tEB)
tEL = intersect(tE, tL)
tEBL = intersect(tEB, tL)
tDEEB = intersect(intersect(tD, tE), tEB)
tDEL = intersect(intersect(tD, tE), tL)
tDEBL = intersect(intersect(tD, tEB), tL)
tEEBL = intersect(intersect(tE, tEB), tL)
tDEEBL = intersect(intersect(tE, tEB), intersect(tD, tL))
inttDE = length(tDE)
inttDEB = length(tDEB)
inttDL = length(tDL)
inttEEB = length(tEEB)
inttEL = length(tEL)
inttEBL = length(tEBL)
inttDEEB = length(tDEEB)
inttDEL = length(tDEL)
inttDEBL = length(tDEBL)
inttEEBL = length(tEEBL)
inttDEEBL = length(tDEEBL)
fileName = paste(getwd(), "/Venn_Toth.jpg", sep="")
jpeg(fileName)
draw.quad.venn(area1=inttD, area2=inttE, area3=inttEB, area4=inttL, n12=inttDE, n13=inttDEB, n14=inttDL, n23=inttEEB, n24=inttEL, n34=inttEBL, n123=inttDEEB, n124=inttDEL, n134=inttDEBL, n234=inttEEBL, n1234=inttDEEBL, c("t-DESeq2", "t-EdgeR", "t-EdgeR-bwn", "t-Limma"), cat.col = colList)
invisible(dev.off())
fileName = paste(getwd(), "/Venn_Toth_NoLimma.jpg", sep="")
jpeg(fileName)
draw.triple.venn(area1=inttD, area2=inttE, area3=inttEB, n12=inttDE, n13=inttDEB, n23=inttEEB, n123=inttDEEB, c("t-DESeq2", "t-EdgeR", "t-EdgeR-bwn"), cat.col = colList[1:3])
invisible(dev.off())
gD2 = sapply(gD, function(x) strsplit(strsplit(x, "[|]")[[1]][3], "[-]")[[1]][1])
fileName = paste(getwd(), "/Venn_DESeq2.jpg", sep="")
jpeg(fileName)
draw.pairwise.venn(area1=intgD, area2=inttD, cross.area = length(intersect(gD2, tD)), category=c("g-DESeq2", "t-DESeq2"))
invisible(dev.off())
gE2 = sapply(gE, function(x) strsplit(strsplit(x, "[|]")[[1]][3], "[-]")[[1]][1])
fileName = paste(getwd(), "/Venn_EdgeR.jpg", sep="")
jpeg(fileName)
draw.pairwise.venn(area1=intgE, area2=inttE, cross.area = length(intersect(gE2, tE)), category=c("g-EdgeR", "t-EdgeR"))
invisible(dev.off())
gEB2 = sapply(gEB, function(x) strsplit(strsplit(x, "[|]")[[1]][3], "[-]")[[1]][1])
fileName = paste(getwd(), "/Venn_EdgeR-btwn.jpg", sep="")
jpeg(fileName)
draw.pairwise.venn(area1=intgEB, area2=inttEB, cross.area = length(intersect(gEB2, tEB)), category=c("g-EdgeR-btwn", "t-EdgeR-btwn"))
invisible(dev.off())
gD2
str(gD2)
str(gD)
length(intersect(gD2, tD)
)
intgD
inttD
intersect(gD2, tD)
crossArea = length(intersect(gD2, tD))
crossArea = length(intersect(gD2, tD))
inttD
nrow(gDESeq)
nrow(gEdgeR)
nrow(tDESeq)
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Method1")
