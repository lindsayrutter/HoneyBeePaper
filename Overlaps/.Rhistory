colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
library(ggplot2)
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
str(mtcars)
names(ret)
ret[["Plot_5"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE)
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
dev.off()
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
str(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret <- vector("list", 3)
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j - 2]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ls()
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/ClusterStandard")
getPCP <- function(nC){
set.seed(1)
colList = scales::hue_pal()(nC+1)
k = cutree(hc, k=nC)
yMin = min(sigDatas[,1:nColumns])
yMax = max(sigDatas[,1:nColumns])
###########################
sbsDF <- data.frame()
for (i in 1:nC){
x = as.data.frame(sigDatas[which(k==i),])
xNames = rownames(x)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
sbsDF = rbind(sbsDF, data.frame(Cluster = paste("Cluster", i), FDR = xFDR))
}
plot_clusters = lapply(1:nC, function(i){
x = as.data.frame(sigDatas[which(k==i),])
nGenes = nrow(x)
x$cluster = "color"
x$cluster2 = factor(x$cluster)
xNames = rownames(x)
saveRDS(xNames, file=paste0("Sig_", nC, "_", i, ".Rds"))
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
fileName = paste(getwd(), "/", outDir, "/", currPair, "_SM_", nC, "_", i, ".jpg", sep="")
plotDEG(data = plotDatas, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = colList[i+1], fileName=fileName)
x$ID = xNames
pcpDat <- melt(x[,c(1:(nColumns+1))], id.vars="ID")
colnames(pcpDat) <- c("ID", "Sample", "Count")
boxDat$Sample <- as.character(boxDat$Sample)
pcpDat$Sample <- as.character(pcpDat$Sample)
p = ggplot(boxDat, aes_string(x = 'Sample', y = 'Count')) + geom_boxplot() + geom_line(data=pcpDat, aes_string(x = 'Sample', y = 'Count', group = 'ID'), colour = colList[i+1]) + xlab(paste("Cluster ", i, " (n=", format(nGenes, big.mark=",", scientific=FALSE), ")",sep="")) + ylab("Count")
fileName = paste(getwd(), "/", outDir, "/", plotName, "_", nC, "_", i, ".jpg", sep="")
jpeg(fileName)
plot(p)
invisible(dev.off())
p
})
ggBP = ggplot(sbsDF, aes(x=Cluster, y=FDR)) +
stat_boxplot(geom ='errorbar') +
geom_boxplot(outlier.shape=NA, aes(fill=Cluster), alpha = 0.3) +
geom_point(aes(fill=Cluster), shape=21, position=position_jitter(width=0.3), alpha=0.5) +
scale_fill_manual(values=colList[c(2:length(colList), 1)])
jpeg(file = paste(getwd(), "/", outDir, "/", currPair, "_boxplot_", nC, ".jpg", sep=""), width=1000, height=700)
ggBP
invisible(dev.off())
jpeg(file = paste(getwd(), "/", outDir, "/", plotName, "_", nC, ".jpg", sep=""), width=1000, height=700)
p = do.call("grid.arrange", c(plot_clusters, ncol=ceiling(nC/2)))
invisible(dev.off())
}
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
library(rtracklayer)
library(Rsamtools)
library(grid)
library(GenomicAlignments)
library(ggplot2)
library(GGally)
library(edgeR)
library(stringr)
library(EDASeq)
library(dplyr)
library(matrixStats)
library(gridExtra)
library(reshape2)
library(scales)
library(bigPint)
library(matrixStats)
rm(list=ls())
i=1
metricsAll <- readRDS("../dataMetrics.Rds")
pairs <- names(metricsAll)
currPair <- pairs[i]
pair1 <- strsplit(currPair, "_")[[1]][1]
pair2 <- strsplit(currPair, "_")[[1]][2]
metrics <- metricsAll[[currPair]]
data <- as.data.frame(readRDS("../../data/data.Rds"))
data <- data[,which(sapply(colnames(data), function(x) unlist(strsplit(x,"[.]"))[1]) %in% c(pair1, pair2))]
data<- cbind(ID = rownames(data), data)
data$ID <- as.character(data$ID)
nms <- colnames(data[-1])
nColumns <- length(data)-1
logData = data
logData[,-1] <- log(data[,-1]+1)
RowSD = function(x) {
sqrt(rowSums((x - rowMeans(x))^2)/(dim(x)[2] - 1))
}
data_Rownames <- data$ID
data = data[,-1]
rownames(data) <- data_Rownames
# Normalize for sequencing depth and other distributional differences between lanes
data <- betweenLaneNormalization(as.matrix(data), which="full", round=FALSE)
data = as.data.frame(data)
# Add mean and standard deviation for each row/gene
data = data %>% mutate(mean= rowMeans(as.matrix(.[nms])), stdev=rowSds(as.matrix(.[nms])))
data$mean <- as.numeric(data$mean)
rownames(data)=data_Rownames
data$ID <- data_Rownames
datas <- t(apply(as.matrix(data[,1:nColumns]), 1, scale))
datas <- as.data.frame(datas)
colnames(datas) <- colnames(data[,1:nColumns])
datas$ID <- rownames(datas)
# Indices of the NAN rows. They had stdev=0 in the filt data
nID <- which(is.nan(datas$N.1))
# Set these filtered values that have all same values for samples to 0
datas[nID,1:nColumns] <- 0
# Combine the filtered and remaining data
boxDat <- melt(datas, id.vars="ID")
colnames(boxDat) <- c("ID", "Sample", "Count")
sigDatas = datas[which(metricsAll[["N_V"]]$padj<0.05),]
xNames = rownames(sigDatas)
xFDR = metrics[which(metrics$ID %in% xNames),]$padj
scatMatMetrics = list()
scatMatMetrics[[currPair]] = metrics[which(metrics$ID %in% xNames),]
scatMatMetrics[[currPair]]$FDR = 10e-10
scatMatMetrics[[currPair]]$ID = as.factor(as.character(scatMatMetrics[[currPair]]$ID))
str(datas)
plotDatas = datas[, c(ncol(datas), 1:ncol(datas)-1)]
str(plotDatas)
plotDatas2 = plotDatas[,c(1,2:4,13:15)]
str(plotDatas2)
plotDatas2 = plotDatas[,c(1,2:4,14:16)]
str(plotDatas2)
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, fileName=fileName)
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05)
ret[["C_T"]]
str(ret)
ret[["N_V"]]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
plotDatas2 = plotDatas[,c(1,5:7,17:19)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
plotDatas2 = plotDatas[,c(1,8:10,20:22)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
plotDatas2 = plotDatas[,c(1,11:13,23:25)]
ret <- plotDEG(data = plotDatas2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
logData2 = logData[,c(1,2:4,14:16)]
str(logData2)
ret <- plotDEG(data = logData2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
logData2 = logData[,c(1,5:7,17:19)]
ret <- plotDEG(data = logData2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
logData2 = logData[,c(1,8:10,20:22)]
ret <- plotDEG(data = logData2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
logData2 = logData[,c(1,11:13,23:25)]
ret <- plotDEG(data = logData2, dataMetrics = scatMatMetrics, option="scatterPoints", threshVar = "padj", threshVal = 0.05, degPointColor = "lawngreen")
ret[["N_V"]]
dev.off()
dev.off()
rm(list=ls())
setwd("~/Desktop/HoneyBeePaper/MortalityData")
d <- read_csv("day3Mortality.csv")
setwd("~/Desktop/HoneyBeePaper/MortalityData")
d <- read_csv("day3Mortality.csv")
library(plyr)
library(ggplot2)
library(multcompView)
library(readr)
d <- read_csv("day3Mortality.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
# Note: There are 14 NC; 15 VR, VC, NR
d = d[which(d$Treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$Treatment
d$Treatment = as.factor(d$Treatment)
colnames(d)[2] = "Day3Mortality"
levels(d$Treatment) <- c('NC', 'NR', 'VC', 'VR')
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
a <- aov(Day3Mortality~Treatment, data=d)
aov.out = aov(Day3Mortality ~ Virus * Diet, data=d)
summary(a)
summary(aov.out)
??aov
head(Day3Mortality)
head(Treatment)
head(d)
d$Treatment
table(d$Treatment)
rm(list=ls())
d <- read_csv("logIAPV.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
d = d[which(d$treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$treatment = as.factor(d$treatment)
colnames(d)[2] = "logIAPV"
levels(d$treatment) <- c('NC', 'NR', 'VC', 'VR')
colnames(d)[1] <- "Treatment"
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
a <- aov(logIAPV~Treatment, data=d)
aov.out = aov(logIAPV ~ Virus * Diet, data=d)
table(d$Treatment)
summary(aov.out)
rm(list=ls())
d <- read_csv("day3Mortality.csv")
d = as.data.frame(d)
attr(d, "spec") <- NULL
# Note: There are 14 NC; 15 VR, VC, NR
d = d[which(d$Treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$Treatment
d$Treatment = as.factor(d$Treatment)
colnames(d)[2] = "Day3Mortality"
levels(d$Treatment) <- c('NC', 'NR', 'VC', 'VR')
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
a <- aov(Day3Mortality~Treatment, data=d)
aov.out = aov(Day3Mortality ~ Virus * Diet, data=d)
summary(aov.out)
??aov
??TukeyHSD
TeaTasting <-
matrix(c(3, 1, 1, 3),
nrow = 2,
dimnames = list(Guess = c("Milk", "Tea"),
Truth = c("Milk", "Tea")))
str(TeaTasting)
TeaTasting
getwd()
setwd("~/Desktop/HoneyBeePaper/Overlaps")
library(VennDiagram)
library(readr)
library(readxl)
#######################################################
# Read in DEG files
RDC <- readRDS("../C_R/DESeq2/RDC.Rds")
RDR <- readRDS("../C_R/DESeq2/RDR.Rds")
RD_DIET_TOTAL <- readRDS("../C_R/DESeq2/RD_DIET_TOTAL.Rds")
REC <- readRDS("../C_R/EdgeR/edgeR/REC.Rds")
RER <- readRDS("../C_R/EdgeR/edgeR/RER.Rds")
RE_DIET_TOTAL <- readRDS("../C_R/EdgeR/edgeR/RE_DIET_TOTAL.Rds")
RLC <- readRDS("../C_R/LimmaVoom/RLC.Rds")
RLR <- readRDS("../C_R/LimmaVoom/RLR.Rds")
RL_DIET_TOTAL <- readRDS("../C_R/LimmaVoom/RL_DIET_TOTAL.Rds")
RDV <- readRDS("../N_V/DESeq2/RDV.Rds")
RDN <- readRDS("../N_V/DESeq2/RDN.Rds")
RD_VIRUS_TOTAL <- readRDS("../N_V/DESeq2/RD_VIRUS_TOTAL.Rds")
REV <- readRDS("../N_V/EdgeR/edgeR/REV.Rds")
REN <- readRDS("../N_V/EdgeR/edgeR/REN.Rds")
RE_VIRUS_TOTAL <- readRDS("../N_V/EdgeR/edgeR/RE_VIRUS_TOTAL.Rds")
GDV <- readRDS("../VirusHoneyBee/DESeq2/GDV.Rds")
GDC <- readRDS("../VirusHoneyBee/DESeq2/GDC.Rds")
GD_TOTAL <- readRDS("../VirusHoneyBee/DESeq2/GD_TOTAL.Rds")
GEV <- readRDS("../VirusHoneyBee/EdgeR/edgeR/GEV.Rds")
GEC <- readRDS("../VirusHoneyBee/EdgeR/edgeR/GEC.Rds")
GE_TOTAL <- readRDS("../VirusHoneyBee/EdgeR/edgeR/GE_TOTAL.Rds")
GLV <- readRDS("../VirusHoneyBee/LimmaVoom/GLV.Rds")
GLC <- readRDS("../VirusHoneyBee/LimmaVoom/GLC.Rds")
GL_TOTAL <- readRDS("../VirusHoneyBee/LimmaVoom/GL_TOTAL.Rds")
NC_NR_NC <- readRDS("../NC_NR_VC_VR/DESeq2/Method1/NC_NR_NC.Rds") #601
NC_NR_NR <- readRDS("../NC_NR_VC_VR/DESeq2/Method1/NC_NR_NR.Rds") #340
str(GDV)
str(RDV)
GRVirus <- matrix(c(length(GDV), length(intersect(GDV, RDV)), length(intersect(GDV, RDV), length(RDV)), nrow = 2))
fisher.test(TeaTasting, alternative = "greater")
GRVirus <- matrix(c(length(GDV), length(intersect(GDV, RDV)), length(intersect(GDV, RDV), length(RDV)), nrow = 2))
length(GDV)
length(intersect(GDV, RDV)
)
length(intersect(GDV, RDV)
)
GRVirus <- matrix(c(length(GDV), length(intersect(GDV, RDV)), length(intersect(GDV, RDV)), length(RDV)), nrow = 2))
GRVirus <- matrix(c(length(GDV), length(intersect(GDV, RDV)), length(intersect(GDV, RDV)), length(RDV)), nrow = 2)
fisher.test(GRVirus, alternative = "greater")
GDVirus
GRVirus
GRControl <- matrix(c(length(GDC), length(intersect(GDC, RDC)), length(intersect(GDC, RDC)), length(RDV)), nrow = 2)
GRControl
ls()
GRControl <- matrix(c(length(GDC), length(intersect(GDC, RDN)), length(intersect(GDC, RDC)), length(RDV)), nrow = 2)
fisher.test(GRControl, alternative = "greater")
GRControl
GRControl <- matrix(c(length(GDC), length(intersect(GDC, RDN)), length(intersect(GDC, RDN)), length(RDV)), nrow = 2)
fisher.test(GRControl, alternative = "greater")
GRControl
GRControl <- matrix(c(length(GDC), length(intersect(GDC, RDN)), length(intersect(GDC, RDN)), length(RDN)), nrow = 2)
fisher.test(GRControl, alternative = "greater")
GRControl
N
dataR = read.delim(file="../N_V/data/AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
dataG = read_delim("../VirusHoneyBee/data/GSE65659_AntiviralResponseReadCounts.txt", "\t", escape_double = FALSE, trim_ws = TRUE)
dataG <- as.data.frame(dataG)
namesR = rownames(dataR)
namesG = unname(sapply(dataG$id, function(x) strsplit(strsplit(x, "[|]")[[1]][3], "[-]")[[1]][1]))
N = intersect(namesG, namesR)
N = length(N)
N
ls()
###### Test overlap
int = length(intersect(GDV, RDV))
int
GRVirus <- matrix(c(N, length(GDV)-int, length(GDR)-int, int), nrow = 2)
GRVirus <- matrix(c(N, length(GDV)-int, length(RDV)-int, int), nrow = 2)
GRVirus
fisher.test(GRVirus, alternative = "greater")
# p-value < 2.2e-16, odds ratio 33.3018
int = length(intersect(GDC, RDN))
GRControl <- matrix(c(N, length(GDC)-int, length(RDN)-int, int), nrow = 2)
GRControl
fisher.test(GRVirus, alternative = "greater")
fisher.test(GRControl, alternative = "greater")
ls()
# p-value < 2.2e-16, odds ratio 33.3018
int = length(intersect(GD_TOTAL, RD_VIRUS_TOTAL))
GRTotal <- matrix(c(N, length(GD_TOTAL)-int, length(RD_VIRUS_TOTAL)-int, int), nrow = 2)
fisher.test(GRTotal, alternative = "greater")
GRTotal
