data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE)
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
library(GGally)
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
library(ggplot2)
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",j)]] <- p
k=k+1
}
str(mtcars)
names(ret)
ret[["Plot_5"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE)
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
ret[[paste0("Plot_",k)]] <- p
k=k+1
}
dev.off()
names(ret)
ret[["Plot_1"]]
ret[["Plot_2"]]
ret[["Plot_3"]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret=list()
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j]] <- p
k=k+1
}
str(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
ret[[5]]
dev.off()
dev.off()
rm(list=ls())
data = mtcars
data$ID = rownames(mtcars)
data = data[, c(12,1:11)]
my_fn <- function(data, mapping, ...){
xChar = as.character(mapping$x)
yChar = as.character(mapping$y)
x = data[,c(xChar)]
y = data[,c(yChar)]
p <- ggplot(data, aes(x=x, y=y)) + geom_point() + geom_point(data = colorData, aes_string(x=xChar, y=yChar), inherit.aes = FALSE, color="orange")
p
}
ret <- vector("list", 3)
colorVec = c(1, 10, 20)
k=1
for (j in c(3:5)){
datSel <- cbind(ID=data$ID, data[,c(2, j)])
datSel$ID = as.character(datSel$ID) #!!!!!!!!!
colorData <- datSel[sample(1:nrow(data), colorVec[k]),] # used to be degData<-
p <- ggpairs(datSel[,-1], lower = list(continuous = my_fn), upper = list(continuous = wrap("cor", size = 4))) + theme_gray()
#ret[[paste0("Plot_",k)]] <- p
ret[[j - 2]] <- p
k=k+1
}
names(ret)
ret[[1]]
ret[[2]]
ret[[3]]
ret[[4]]
citation(package="htmlwidgets")
citation(package="ggplotly")
install.packages("ggplotly")
??ggplotly
??sendcustommessage
setwd("~/Desktop/HoneyBeePaper/MortalityData")
rm(list=ls())
dev.off()
d <- read_csv("day3Mortality.csv")
d = as.data.frame(d)
library(plyr)
library(ggplot2)
library(multcompView)
library(readr)
d <- read_csv("day3Mortality.csv")
d = as.data.frame(d)
str(d)
attr(d, "spec") <- NULL
str(d)
# Note: There are 14 NC; 15 VR, VC, NR
d = d[which(d$Treatment %in% c("None Chestnut", "None Rockrose", "Virus Chestnut", "Virus Rockrose")),]
d$Treatment = as.factor(d$Treatment)
colnames(d)[2] = "Day3Mortality"
levels(d$Treatment) <- c('NC', 'NR', 'VC', 'VR')
str(d)
d$Virus = sapply(d$Treatment, function(x) substr(x, 1, 1))
d$Diet = sapply(d$Treatment, function(x) substr(x, 2, 2))
d$Virus = as.factor(d$Virus)
d$Diet = as.factor(d$Diet)
head(d)
a <- aov(Day3Mortality~Treatment, data=d)
aov.out = aov(Day3Mortality ~ Virus * Diet, data=d)
a
aov.out
summary(aov.out)
summary(a)
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
tHSD
tHSD <- TukeyHSD(aov.out, ordered = FALSE, conf.level = 0.95)
tHSD
generate_label_df1 <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$Day3Mortality)) + 0.05)
boxplot.df[2,]$V1 = 0.22
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = generate_label_df1(tHSD, 'Treatment'), aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate")
tHSD <- TukeyHSD(a, ordered = FALSE, conf.level = 0.95)
generate_label_df1 <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$Day3Mortality)) + 0.05)
boxplot.df[2,]$V1 = 0.22
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = generate_label_df1(tHSD, 'Treatment'), aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate")
aov.out = aov(Day3Mortality ~ Virus * Diet, data=d)
tHSD <- TukeyHSD(aov.out, ordered = FALSE, conf.level = 0.95)
generate_label_df1 <- function(HSD, flev){
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
plot.labels <- names(Tukey.labels[['Letters']])
# Get highest quantile for Tukey's 5 number summary and add a bit of space to buffer between
# upper quantile and label placement
boxplot.df <- ddply(d, flev, function (x) max(fivenum(x$Day3Mortality)) + 0.05)
boxplot.df[2,]$V1 = 0.22
# Create a data frame out of the factor levels and Tukey's homogenous group letters
plot.levels <- data.frame(plot.labels, labels = Tukey.labels[['Letters']],
stringsAsFactors = FALSE)
# Merge it with the labels
labels.df <- merge(plot.levels, boxplot.df, by.x = 'plot.labels', by.y = flev, sort = FALSE)
return(labels.df)
}
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = generate_label_df1(tHSD, 'Treatment'), aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate")
ggplot(d, aes(x=Treatment, y=Day3Mortality))
ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2")
ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = generate_label_df1(tHSD, 'Treatment'), aes(x = plot.labels, y = V1, label = labels))
generate_label_df1(tHSD, 'Treatment')
HSD=tHSD
flev='Treatment'
# Extract labels and factor levels from Tukey post-hoc
Tukey.levels <- HSD[[flev]][,4]
Tukey.labels <- multcompLetters(Tukey.levels)['Letters']
Tukey.levels
HSD[[flev]]
HSD
plotMortality = ggplot(d, aes(x=Treatment, y=Day3Mortality)) + geom_boxplot(fill="palegreen2") + geom_text(data = generate_label_df1(tHSD, 'Virus:Diet'), aes(x = plot.labels, y = V1, label = labels)) + ylab("Day 3 Mortality Rate")
plotMortality
