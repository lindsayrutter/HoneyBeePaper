library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- map_data("usa")
dim(usa)
# group: controls whether adjacent points should be connected by lines.
# If they are in the same group, then they get connected, but if they
# are in different groups then they don’t.
head(usa)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
usa <- map_data("usa")
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- map_data("usa")
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
rm(list=ls())
usa <- map_data("usa")
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
library(ggplot2)
library(ggmap)
library(maps)
library(mapdata)
usa <- map_data("usa")
dim(usa)
# group: controls whether adjacent points should be connected by lines.
# If they are in the same group, then they get connected, but if they
# are in different groups then they don’t.
head(usa)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
remove.packages("ggmap")
library(ggmap)
uninstall.packages("ggmap")
library(installr)
install.packages("installr")
library(installr)
library(ggmap)
devtools::install_github("dkahle/ggmap", ref = "tidyup")
devtools::install_github("dkahle/ggmap", ref = "tidyup", dependencies = TRUE, repo = repos='http://cran.rstudio.com/')
devtools::install_github("dkahle/ggmap", ref = "tidyup", dependencies = TRUE, repos='http://cran.rstudio.com/')
utils::setInternet2(TRUE)
devtools::install_github("dkahle/ggmap", ref = "tidyup", dependencies = TRUE, repos='http://cran.rstudio.com/')
devtools::install_github("dkahle/ggmap", ref = "tidyup", dependencies = TRUE, repos='http://cran.rstudio.com/')
devtools::install_github("dkahle/ggmap", dependencies = TRUE, repos='http://cran.rstudio.com/')
install.packages("ggmap")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
par(pty="s")
mapBG1 = plotmap("Brandenburg Gate, Berlin", zoom = 15)
??plotmap
?plotmap
install.packages("RgoogleMaps")
install.packages("RgoogleMaps")
library(RgoogleMaps)
par(pty="s")
mapBG1 = plotmap("Brandenburg Gate, Berlin", zoom = 15)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
usa <- map_data("usa")
usa
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
devtools::install_github("dkahle/ggmap")
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
library(ggmap)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
packageVersion("ggmap")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
if(!requireNamespace("devtools")) install.packages("devtools")
devtools::install_github("dkahle/ggmap", ref = "tidyup")
library(ggmap)
library(ggplot2)
library(maps)
library(mapdata)
name = c("a17", "a20-24", "a25-28", "a18,19", "a35,36", "a31", "a38", "a43")
lon = c(-119.7603, -119.7563, -119.7537, -119.7573, -119.7467, -119.7478, -119.7447, -119.7437)
lat = c(34.75474, 34.75380, 34.75371, 34.75409, 34.75144, 34.75234, 34.75230, 34.75251)
sisquoc <- data.frame(name=name, lon=lon, lat=lat)
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
register_google(key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
has_goog_key()
ggmap(
ggmap = get_map(
"Dayton",
zoom = 13, scale = "auto",
maptype = "satellite",
source = "google"),
extent = "device",
legend = "topright"
)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
sq_map
ggmap(sq_map) + geom_point(data = sisquoc, mapping = aes(x = lon, y = lat), color = "red")
sisquoc
sisquoc$lon
sbbox <- make_bbox(lon = sisquoc$lon, lat = sisquoc$lat, f = .1)
sq_map <- get_map(location = sbbox, maptype = "satellite", source = "google", api_key = "AIzaSyCcJu4DttxEDccaixZomOCXcUhptYHX2n4")
ggmap(sq_map) + geom_point(data = sisquoc, mapping = aes(x = lon, y = lat), color = "red")
?make_bbox
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 13, maptype = "satellite")
island
ggmap(island)
RL <- read.table(text = "1    17.6328    -63.27462
2    17.64614   -63.26499
3    17.64755   -63.25658
4    17.64632   -63.2519
5    17.64888   -63.2311
6    17.63113   -63.2175
7    17.61252   -63.23623
8    17.62463   -63.25958", header = F)
RL
RL <- setNames(RL, c("ID", "Latitude", "Longitude"))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-63.280, -63.20), expand = c(0, 0)) +
scale_y_continuous(limits = c(17.60, 17.66), expand = c(0, 0))
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
rm(list=ls())
dev.off()
dev.off()
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
RL <- read.table(text = "1    38.4123    -110.7835
2    38.4139   -110.7819
3    38.3997   -110.7916
4    38.3941   -110.7896
5    38.3949   -110.7869
6    38.395   -110.7852", header = F)
RL <- setNames(RL, c("ID", "Latitude", "Longitude"))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.7920, -110.7818), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.7930, -110.7798), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3940, 38.4140), expand = c(0, 0))
ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3900, 38.4200), expand = c(0, 0))
dev.off()
p <- ggmap(island, extent = "panel", legend = "bottomright") +
geom_point(aes(x = Longitude, y = Latitude), data = RL, size = 4, color = "#ff0000") +
scale_x_continuous(limits = c(-110.8020, -110.7618), expand = c(0, 0)) +
scale_y_continuous(limits = c(38.3900, 38.4200), expand = c(0, 0))
p
ggplotly(p)
str(RL)
library(ggplotly)
install.packages("ggplotly")
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages("ggplotly", repos="http://cran.rstudio.com/", dependencies=TRUE)
library(ggplotly)
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
options(repos='http://cran.rstudio.com/')
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
install.packages('ggplotly', dependencies=TRUE, repos='http://cran.rstudio.com/')
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -63.247593, lat = 17.631598), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
library(ggmap)
library(ggplot2)
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
island = get_map(location = c(lon = -110.7919, lat = 38.4065), zoom = 13, maptype = "satellite")
browseVignettes("Sushi")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("Sushi", version = "3.8")
browseVignettes("Sushi")
testScatter <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
View(testScatter)
rm(testScatter)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
str(dat)
ggplotly(dat)
library(ggplot2)
library(plotly)
g <- ggplot(dat)
g
dat
ggplot(dat) + geom_point()
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
g
ggplotly(g)
dev.off()
rm(list=ls())
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
str(dat)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/testScatter.csv")
g <- ggplot(dat, aes(x=OrfCoverage, y=VIGACoverage)) + geom_point()
ggplotly(g)
ContigLengths <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
View(ContigLengths)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
str(dat)
View(dat)
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + geom_bar(position = "dodge")
str(dat)
summary(dat$Length)
ggplot(df, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge')
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=100)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=10)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', binwidth=30)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=300)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=3)
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
rm(list=ls())
dev.off()
dev.off()
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
dat <- read.csv("~/Desktop/Projects/VirusHackathon/ContigLengths.csv")
names(dat) <- c("Contig", "Length", "Group")
ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=10)
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='dodge', bins=5)
g
dev.off()
ggplot(dat, aes(fill=Group, y=Group, x=Length)) +
geom_bar( stat="identity")
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=5)
g
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=10)
g
ggplotly(g)
g <- ggplot(dat, alpha = 0.2, aes(x = Length, group = Group, fill = Group)) + stat_bin(aes(y=..density..), position='identity', bins=50)
g
head(dat)
summary(dat$KU)
library(dplyr)
dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
uDat <- dat %>% filter(Group=="U")
kuDat <- dat %>% filter(Group=="KU")
nrow(uDat)
nrow(kuDat)
summary(uDat$Length)
summary(kuDat$Length)
setwd("~/VisualizationMethods/ReproducibleFigures")
library(bigPint)
load("data/kidneyLiver.rda")
dat <- data
dat <- dat[,1:7]
dat[,-1] <- log(dat[,-1]+1)
load("data/add1_metrics.rda")
app <- plotLitreApp(data = dat, dataMetrics = metrics, pointColor = '#FF34B3')
if (interactive()) {
shiny::runApp(app, port = 1234, launch.browser = TRUE)
}
setwd("~/HoneyBeePaper/PostHocDEGPatterns")
functionRT <- function(data, type, colNum, PVal){
rsq <- function (x, y) cor(x, y) ^ 2
Variables <- read_csv("~/HoneyBeePaper/Variables.csv")
myVar <- as.data.frame(Variables[,colNum])[,1]
readFile <- c("../../N_V/DESeq2/ClusterStandard/Sig_4_", "../../ResistanceTolerance/Clustering_Tolerance/Sig_4_", "../../ResistanceTolerance/Clustering_Resistance/Sig_4_")
strVar <- c("virus", "tolerance", "resistance")
getR2 <- function(rf, sv){
dfR2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2) <- c("Group", "R2")
allR2 <- c()
for (i in 1:4){
temp <- readRDS(paste0(rf, i, ".Rds")) # different
temp2 <- data[which(rownames(data) %in% temp),]
temp3 = c()
allR2 <- c(allR2, temp)
if (nrow(temp2)>0){
for (j in 1:nrow(temp2)){
temp3[j] <- rsq(as.numeric(temp2[j,]), myVar)
}
}
dfR2 <- rbind(dfR2, data.frame(Group = rep(paste0("Cluster",i), length(temp3)), R2 = temp3))
}
dfR2Box <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2Box) <- c("Group", "R2")
dataMin <- data[-which(rownames(data) %in% allR2),]
temp3 = c()
if (nrow(dataMin)>0){
for (i in 1:nrow(dataMin)){
temp3[i] <- rsq(as.numeric(dataMin[i,]), myVar)
}
}
temp3 <- temp3[-which(is.na(temp3))]
dfR2Box <- rbind(dfR2Box, data.frame(Group = rep(paste0("data"), length(temp3)), R2 = temp3))
list(dfR2, dfR2Box)
}
virusR2 <- getR2(readFile[1], strVar[1])
plotVirus <- rbind(virusR2[[1]], virusR2[[2]])
toleranceR2 <- getR2(readFile[2], strVar[2])
plotTolerance <- rbind(toleranceR2[[1]], toleranceR2[[2]])
resistanceR2 <- getR2(readFile[3], strVar[3])
plotResistance <- rbind(resistanceR2[[1]], resistanceR2[[2]])
makePlot <- function(inputR2, degGroup){
png(paste0(degGroup, type, '.jpg'))
print({
# Kruskal test
kruskal.test(R2 ~ Group, data = inputR2)
output <- pairwise.wilcox.test(inputR2$R2, inputR2$Group, p.adjust.method = "BH")
# Welch test
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch2 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),])
welch3 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),])
welch4 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),])
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1[[3]], welch2[[3]], welch3[[3]], welch4[[3]])))
label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size=6, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray() + theme(axis.text=element_text(size=16), axis.title=element_text(size=16), legend.position="none")
})
dev.off()
PVal
}
PVal <- makePlot(plotVirus, "virus")
PVal <- makePlot(plotTolerance, "tolerance")
PVal <- makePlot(plotResistance, "resistance")
PVal
}
library(readr)
library(ggplot2)
library(EDASeq)
library(dplyr)
library(genefilter)
library(nlme)
library(onewaytests)
source("functionRT.R")
data <- as.data.frame(readRDS("../../NC_NR_VC_VR/data/data.Rds"))
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
dev.off()
str(data)
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
functionRT <- function(data, type, colNum, PVal){
rsq <- function (x, y) cor(x, y) ^ 2
#Variables <- read_csv("../Variables.csv")
Variables <- read_csv("../PathogenResponse/day3Mortality.csv")
myVar <- as.data.frame(Variables[,colNum])[,1]
readFile <- c("../N_V/DESeq2/ClusterStandard/Sig_4_", "../ResistanceTolerance/Clustering_Tolerance/Sig_4_", "../ResistanceTolerance/Clustering_Resistance/Sig_4_")
strVar <- c("virus", "tolerance", "resistance")
getR2 <- function(rf, sv){
dfR2 <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2) <- c("Group", "R2")
allR2 <- c()
for (i in 1:4){
temp <- readRDS(paste0(rf, i, ".Rds")) # different
temp2 <- data[which(rownames(data) %in% temp),]
temp3 = c()
allR2 <- c(allR2, temp)
if (nrow(temp2)>0){
for (j in 1:nrow(temp2)){
temp3[j] <- rsq(as.numeric(temp2[j,]), myVar)
}
}
dfR2 <- rbind(dfR2, data.frame(Group = rep(paste0("Cluster",i), length(temp3)), R2 = temp3))
}
dfR2Box <- data.frame(matrix(ncol = 2, nrow = 0))
colnames(dfR2Box) <- c("Group", "R2")
dataMin <- data[-which(rownames(data) %in% allR2),]
temp3 = c()
if (nrow(dataMin)>0){
for (i in 1:nrow(dataMin)){
temp3[i] <- rsq(as.numeric(dataMin[i,]), myVar)
}
}
temp3 <- temp3[-which(is.na(temp3))]
dfR2Box <- rbind(dfR2Box, data.frame(Group = rep(paste0("data"), length(temp3)), R2 = temp3))
list(dfR2, dfR2Box)
}
virusR2 <- getR2(readFile[1], strVar[1])
plotVirus <- rbind(virusR2[[1]], virusR2[[2]])
toleranceR2 <- getR2(readFile[2], strVar[2])
plotTolerance <- rbind(toleranceR2[[1]], toleranceR2[[2]])
resistanceR2 <- getR2(readFile[3], strVar[3])
plotResistance <- rbind(resistanceR2[[1]], resistanceR2[[2]])
makePlot <- function(inputR2, degGroup){
png(paste0(degGroup, type, '.jpg'))
print({
# Kruskal test
kruskal.test(R2 ~ Group, data = inputR2)
output <- pairwise.wilcox.test(inputR2$R2, inputR2$Group, p.adjust.method = "BH")
# Welch test
welch1 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster1", "data")),])
welch2 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster2", "data")),])
welch3 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster3", "data")),])
welch4 = welch.test(R2 ~ Group, data = inputR2[which(inputR2$Group %in% c("Cluster4", "data")),])
PVal <- rbind(PVal, data.frame(Method = rep(degGroup,4), Type = rep(type, 4), Cluster = c(1,2,3,4), PKruskal = c(signif(output[[3]][4],3), signif(output[[3]][8],3), signif(output[[3]][12],3), signif(output[[3]][16],3)), PWelch = c(welch1[[3]], welch2[[3]], welch3[[3]], welch4[[3]])))
label1 = paste0(as.character(length(which(inputR2$Group=="Cluster1"))), "\n", as.character(signif(output[[3]][4],3)))
label2 = paste0(as.character(length(which(inputR2$Group=="Cluster2"))), "\n", as.character(signif(output[[3]][8],3)))
label3 = paste0(as.character(length(which(inputR2$Group=="Cluster3"))), "\n", as.character(signif(output[[3]][12],3)))
label4 = paste0(as.character(length(which(inputR2$Group=="Cluster4"))), "\n", as.character(signif(output[[3]][16],3)))
labelDF = data.frame(plot.labels=c("Cluster1","Cluster2","Cluster3","Cluster4","data"), labels = c(label1,label2,label3,label4,length(which(inputR2$Group=="data"))), V1 = rep(0.5,5))
ggplot(inputR2, aes(x=Group, y=R2)) + geom_boxplot(fill="palegreen2") + geom_text(data = labelDF, size=6, aes(x = plot.labels, y = V1, label = labels)) + ylab(paste0("R2 with", type)) + theme_gray() + theme(axis.text=element_text(size=16), axis.title=element_text(size=16), legend.position="none")
})
dev.off()
PVal
}
PVal <- makePlot(plotVirus, "virus")
PVal <- makePlot(plotTolerance, "tolerance")
PVal <- makePlot(plotResistance, "resistance")
PVal
}
data <- as.data.frame(readRDS("../NC_NR_VC_VR/data/data.Rds"))
PVal <- data.frame()
PVal <- functionRT(data=data, type="IAPV", colNum=7, PVal=PVal)
