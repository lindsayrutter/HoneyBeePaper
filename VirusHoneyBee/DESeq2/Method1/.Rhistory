Color = rep(0,nPerm)
Color[1] = 1
fullDat <- data.frame()
lineup <- permute(seq(1:nPerm))
correctPlace[t] <- which(lineup==1)
j=1
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
if (option=="standardize"){
dat$y = apply(as.matrix(dat$y), 2, scale)
}
if (option=="log"){
dat$y = log(dat$y +1)
}
dat$y
str(dat)
t=1
FDR = rep(0,nPerm)
FC = rep(0,nPerm)
Color = rep(0,nPerm)
Color[1] = 1
fullDat <- data.frame()
lineup <- permute(seq(1:nPerm))
correctPlace[t] <- which(lineup==1)
j=1
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
dat
rm(dat)
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
dat
gene
t(gene)
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
dat
rm(dat)
x
which(lineup==j)
t(gene)
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
dat
colnames(dat)=c("x","y","z")
dat
dat$y = apply(as.matrix(dat$y), 2, scale)
dat
t=1
FDR = rep(0,nPerm)
FC = rep(0,nPerm)
Color = rep(0,nPerm)
Color[1] = 1
fullDat <- data.frame()
lineup <- permute(seq(1:nPerm))
correctPlace[t] <- which(lineup==1)
j=1
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
colnames(dat)=c("x","y","z")
dat
dat$y = apply(as.matrix(dat$y), 2, scale)
dat
rm(list=ls())
getwd()
setwd("~/Desktop/bigPint")
rm(list=ls())
dev.off()
install(); document(); install(); document()
library(bigPint)
ls()
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/Lineups/Log")
ls()
beeCounts <- readRDS("../../data/data.Rds")
plotPermutations(beeCounts, nPerm = 10, topThresh = 50, option="log", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/Lineups/Standardize")
getwd()
ls()
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
plotPermutations(beeCounts, nPerm = 10, topThresh = 50, option="standardize", outDir = getwd())
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
data=beeCounts; nPerm=10; topThresh=50; threshVal=0.05; option="standardize"; outDir=getwd()
getwd()
groups <- unique(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))[-1]
i=1;j=2
group1 = groups[i]
group2 = groups[j]
finalOutDir=paste0(outDir, "/", group1, "_", group2)
nRep = length(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])[-1]) / length(unique(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])[-1]))
groupNames = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
listCond = groupNames[c(which(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))==group1), which(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))==group2))]
permCols = colnames(data)[which(groupNames %in% c(group1, group2))]
allComb <- getPerms(length(listCond))
allCombLab <- allComb
for (k in 1:(length(listCond))){
allCombLab[which(allCombLab == k)] = permCols[k]
}
permList <- list()
correctPlace <- list()
numSig <- list()
if (!dir.exists(finalOutDir)){
dir.create(finalOutDir)
}
data2 = data[,c(which(groupNames %in% "ID"), which(groupNames %in% c(group1, group2)))]
data2 = as.data.frame(data2)
# Keep original order for first row, then obtain random rows from allCombLab
randPerm = c(1, sample(2:nrow(allCombLab), (nPerm-1)))
for(a in 1:nPerm){
data3 <- data2[allCombLab[randPerm[a],]]
colnames(data3) <- colnames(data2)[-1]
x <- DGEList(counts=data3)
group <- as.factor(unlist(lapply(colnames(data3), function (x) unlist(strsplit(x, "[.]"))[1])))
x$samples$group <- group
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
keep.exprs <- rowSums(cpm>1)>=nRep
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
x <- calcNormFactors(x, method = "TMM")
design <- model.matrix(~0+group)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(contrasts = paste0(group1,"-",group2), levels = colnames(design))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
topGenes <- list()
genePval <- list()
temp <- topTreat(efit, coef=1, n=Inf)
temp2 <- temp[order(temp[,5]),]
sigRows <- 1:topThresh #Keep top 100 lowest FDR
temp3 <- temp2[sigRows,]
numSig[[a]] = length(which(temp2$adj.P.Val < threshVal)) #Count how many DEGs with small adjPVal
setDT(temp3, keep.rownames = TRUE)[]
colnames(temp3)[1] = "ID"
colnames(temp3)[5] = "pVal" # can't have dots in name
colnames(temp3)[6] = "adjPVal" # can't have dots in name
temp3 <- as.data.frame(temp3)
setDT(data3, keep.rownames = TRUE)[]
colnames(data3)[1] = "ID"
data3 <- as.data.frame(data3)
tt <- merge(data3, temp3, by="ID")
permList[[a]] = arrange(tt, adjPVal)
write.csv(permList[[a]], file= paste(finalOutDir, "/TopDEG", a, ".csv", sep=""))
}
t=1
FDR = rep(0,nPerm)
FC = rep(0,nPerm)
Color = rep(0,nPerm)
Color[1] = 1
fullDat <- data.frame()
lineup <- permute(seq(1:nPerm))
correctPlace[t] <- which(lineup==1)
j=1
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
colnames(dat)=c("x","y","z")
if (option=="standardize"){
dat$y = apply(as.matrix(dat$y), 2, scale)
}
dat
str(dat)
dat$x=as.factor(dat$x)
levels(dat$x)=c(group1,group2)
dat$meanG1 = mean(filter(dat, x==group1)$y)
unlis(dat$y)
dat$y
dat$x
dat$z
str(dat)
as.integer(dat$y)
dat$y
as.numeric(dat$y)
dat$y = as.numeric(dat$y)
str(dat)
dat$y
mean(dat$y)
st(dat$y)
s(dat$y)
sd(dat$y)
dat$x=as.factor(dat$x)
levels(dat$x)=c(group1,group2)
dat$meanG1 = mean(filter(dat, x==group1)$y)
dat$meanG2 = mean(filter(dat, x==group2)$y)
for (j in 1:nPerm){
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
colnames(dat)=c("x","y","z")
if (option=="standardize"){
dat$y = apply(as.matrix(dat$y), 2, scale)
dat$y = as.numeric(dat$y)
}
if (option=="log"){
dat$y = log(dat$y +1)
}
dat$x=as.factor(dat$x)
levels(dat$x)=c(group1,group2)
dat$meanG1 = mean(filter(dat, x==group1)$y)
dat$meanG2 = mean(filter(dat, x==group2)$y)
fullDat <- rbind(fullDat, dat)
}
View(fullDat)
qpDF = data.frame(FDR=FDR, FC=FC, Color=Color)
allPlot = ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5, scales = "free_y")
allPlot2 = ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + scale_y_continuous(limits=c(0, max(fullDat$y))) + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5)
absFC = abs(FC)
statPlot = qplot(FDR, absFC, xlab = "FDR", ylab ="abs(logFC)", color = factor(Color), size = factor(Color)) + scale_color_manual(values=c("black", "red")) + scale_size_manual(values = c(3, 6)) + theme(legend.position="none") + ylim(0,max(absFC))
jpeg(file = paste0(finalOutDir, "/ind_", "Gene", t, ".jpg"), height = ceiling(nPerm/5)*175, width = 700)
print(allPlot)
dev.off()
jpeg(file = paste0(finalOutDir, "/global_", "Gene", t, ".jpg"), height = ceiling(nPerm/5)*175, width = 700)
print(allPlot2)
dev.off()
jpeg(file = paste0(finalOutDir, "/stats_", "Gene", t, ".jpg"), height = ceiling(nPerm/5)*175, width = 700)
print(statPlot)
dev.off()
getwd()
getwd()
setwd("~/Desktop/bigPint")
rm(list=ls())
install(); document(); install(); document()
library(bigPint)
getwd()
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/Lineups/Standardize")
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
plotPermutations(beeCounts, nPerm = 10, topThresh = 50, option="standardize", outDir = getwd())
rm(list=ls())
getwd()
beeCounts <- readRDS("../../data/data.Rds")
data=beeCounts; nPerm=10; topThresh=50; option="standardize"; outDir=getwd(); threshVal = 0.05
groups <- unique(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))[-1]
i=1;j=2
group1 = groups[i]
group2 = groups[j]
finalOutDir=paste0(outDir, "/", group1, "_", group2)
nRep = length(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])[-1]) / length(unique(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])[-1]))
groupNames = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
listCond = groupNames[c(which(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))==group1), which(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))==group2))]
permCols = colnames(data)[which(groupNames %in% c(group1, group2))]
allComb <- getPerms(length(listCond))
allCombLab <- allComb
for (k in 1:(length(listCond))){
allCombLab[which(allCombLab == k)] = permCols[k]
}
permList <- list()
correctPlace <- list()
numSig <- list()
if (!dir.exists(finalOutDir)){
dir.create(finalOutDir)
}
data2 = data[,c(which(groupNames %in% "ID"), which(groupNames %in% c(group1, group2)))]
data2 = as.data.frame(data2)
# Keep original order for first row, then obtain random rows from allCombLab
randPerm = c(1, sample(2:nrow(allCombLab), (nPerm-1)))
option
for(a in 1:nPerm){
data3 <- data2[allCombLab[randPerm[a],]]
colnames(data3) <- colnames(data2)[-1]
x <- DGEList(counts=data3)
group <- as.factor(unlist(lapply(colnames(data3), function (x) unlist(strsplit(x, "[.]"))[1])))
x$samples$group <- group
cpm <- cpm(x)
lcpm <- cpm(x, log=TRUE)
keep.exprs <- rowSums(cpm>1)>=nRep
x <- x[keep.exprs,, keep.lib.sizes=FALSE]
x <- calcNormFactors(x, method = "TMM")
design <- model.matrix(~0+group)
colnames(design) <- gsub("group", "", colnames(design))
contr.matrix <- makeContrasts(contrasts = paste0(group1,"-",group2), levels = colnames(design))
v <- voom(x, design)
vfit <- lmFit(v, design)
vfit <- contrasts.fit(vfit, contrasts=contr.matrix)
efit <- eBayes(vfit)
topGenes <- list()
genePval <- list()
temp <- topTreat(efit, coef=1, n=Inf)
temp2 <- temp[order(temp[,5]),]
sigRows <- 1:topThresh #Keep top 100 lowest FDR
temp3 <- temp2[sigRows,]
numSig[[a]] = length(which(temp2$adj.P.Val < threshVal)) #Count how many DEGs with small adjPVal
setDT(temp3, keep.rownames = TRUE)[]
colnames(temp3)[1] = "ID"
colnames(temp3)[5] = "pVal" # can't have dots in name
colnames(temp3)[6] = "adjPVal" # can't have dots in name
temp3 <- as.data.frame(temp3)
setDT(data3, keep.rownames = TRUE)[]
colnames(data3)[1] = "ID"
data3 <- as.data.frame(data3)
tt <- merge(data3, temp3, by="ID")
permList[[a]] = arrange(tt, adjPVal)
write.csv(permList[[a]], file= paste(finalOutDir, "/TopDEG", a, ".csv", sep=""))
}
t=1
FDR = rep(0,nPerm)
FC = rep(0,nPerm)
Color = rep(0,nPerm)
Color[1] = 1
fullDat <- data.frame()
lineup <- permute(seq(1:nPerm))
correctPlace[t] <- which(lineup==1)
for (j in 1:nPerm){
FDR[j] = permList[[j]]$adjPVal[t]
FC[j] = permList[[j]]$logFC[t]
gene = permList[[j]][t,2:(2*nRep+1)]
x = unlist(lapply(colnames(gene), function (x) unlist(strsplit(x, "[.]"))[1]))
x[x==group1] <- 1
x[x==group2] <- 2
dat = data.frame(x=x,y=t(gene),z=which(lineup==j))
colnames(dat)=c("x","y","z")
if (option=="standardize"){
dat$y = apply(as.matrix(dat$y), 2, scale)
dat$y = as.numeric(dat$y)
}
if (option=="log"){
dat$y = log(dat$y +1)
}
dat$x=as.factor(dat$x)
levels(dat$x)=c(group1,group2)
dat$meanG1 = mean(filter(dat, x==group1)$y)
dat$meanG2 = mean(filter(dat, x==group2)$y)
fullDat <- rbind(fullDat, dat)
}
qpDF = data.frame(FDR=FDR, FC=FC, Color=Color)
View(fullDat)
ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5, scales = "free_y")
dev.off()
dev.off()
ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5, scales = "free_y")
dev.off()
dev.off()
ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5, scales = "free_y")
ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + scale_y_continuous(limits=c(0, max(fullDat$y))) + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5)
allPlot2 = ggplot(fullDat, aes(x, y)) + geom_point(aes(colour = factor(x)), shape = 20, size=5, alpha = 0.5) + scale_shape(solid = FALSE) + ggtitle(paste("Transcript: ", t)) + ylab("Read Count") + scale_y_continuous(limits=c(min(fullDat$y), max(fullDat$y))) + theme(axis.title.x = element_blank(), legend.position="bottom", axis.text=element_text(size=12), axis.title=element_text(size=12), legend.title=element_text(size=12), legend.text=element_text(size=12), plot.title=element_text(hjust=0.5)) + labs(colour = "Group", size=12) + geom_segment(aes(x = 1, y = meanG1, xend = 2, yend = meanG2), colour="gray25", size = 0.1) + facet_wrap(~ z, ncol = 5)
allPlot2
dev.off()
rm(list=ls())
getwd()
setwd("~/Desktop/bigPint")
install(); document(); install(); document()
library(bigPint)
setwd("~/Desktop/HoneyBeePaper/VirusHoneyBee/Lineups/Standardize")
getwd()
beeCounts <- readRDS("../../data/data.Rds")
plotPermutations(beeCounts, nPerm = 10, topThresh = 50, option="standardize", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/Cotyledon")
setwd("~/Desktop/HoneyBeePaper/Cotyledon/Lineups/Raw")
getwd()
setwd("~/Desktop/HoneyBeePaper/Cotyledon/Lineups/Raw")
rm(list=ls())
data(soybean_cn)
plotPermutations(soybean_cn, nPerm = 10, topThresh = 20, outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/Cotyledon/Lineups/Log")
data(soybean_cn)
soybean_cn[,-1] <- log(soybean_cn[,-1]+1)
plotPermutations(soybean_cn, nPerm = 10, topThresh = 50, option = "log", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/Cotyledon/Lineups/Standardized")
rm(list=ls())
data(soybean_cn)
plotPermutations(soybean_cn, nPerm = 10, topThresh = 50, option = "standardized", outDir = getwd())
getwd()
rm(list=ls())
dev.off()
getwd()
data(soybean_cn)
plotPermutations(soybean_cn, nPerm = 10, topThresh = 50, option = "standardize", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Raw")
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Raw")
getwd()
rm(list=ls())
beeCounts <- readRDS("../data/data.Rds")
getwd()
beeCounts <- readRDS("../../data/data.Rds")
plotPermutations(beeCounts, nPerm = 10, topThresh = 50, outDir = getwd())
getwd()
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Raw")
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
str(beeCounts)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, outDir = getwd())
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
str(beeCounts)
beeCounts[,-1] <- log(beeCounts[,-1]+1)
str(beeCounts)
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Raw")
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Log")
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
beeCounts[,-1] <- log(beeCounts[,-1]+1)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, option="log", outDir = getwd())
rm(list=ls())
dev.off()
dev.off()
setwd("~/Desktop/HoneyBeePaper/N_V/data")
beeCounts <-read.delim(file="AllLaneCount.txt",row.names=1,stringsAsFactors = FALSE)
colnames(beeCounts) <- c("NC.1", "NC.2", "NR.1", "VR.1", "NS.1", "VP.1", "NS.2", "VR.2", "NP.1", "VP.2", "VC.1", "NP.2", "VP.3", "NP.3", "VS.1", "VS.2", "VC.2", "NC.3", "VP.4", "NC.4", "NR.2", "VC.3", "VC.4", "NP.4", "VR.3", "NC.5", "VS.3", "NP.5", "VC.5", "VS.4", "NS.3", "VS.5", "VP.5", "NR.3", "NR.4", "VC.6", "NS.4", "NC.6", "NP.6", "VR.4", "NR.5", "NR.6", "NS.5", "VP.6", "NS.6", "VR.5", "VR.6", "VS.6")
data <- beeCounts[ , order(names(beeCounts))]
treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1]))
treatment
iTreatment = which(treatment %in% c("NC","NR","VC","VR"))
data = data[,iTreatment]
head(data)
str(data)
rep("N",1:12)
c("N",1:12)
c(paste0("N.",1:12))
colnames(data) = c(c(paste0("N.",1:12)), c(paste0("V.",1:12)))
str(data)
saveRDS(data, file="data.Rds")
setwd("~/Desktop/HoneyBeePaper/N_V/Lineups/Raw")
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/N_V/Lineups/Log")
rm(list=ls())
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, option="log", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/N_V/Lineups/Standardize")
setwd("~/Desktop/HoneyBeePaper/N_V/Lineups/Standardize")
rm(list=ls())
dev.off()
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, option="standardize", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/Cotyledon/Lineups/Log")
data(soybean_cn)
plotPermutations(soybean_cn, nPerm = 10, topThresh = 50, option = "log", outDir = getwd())
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR")
rm(list=ls())
dev.off()
setwd("~/Desktop/HoneyBeePaper/NC_NR_VC_VR/Lineups/Log")
beeCounts <- readRDS("../../data/data.Rds")
beeCounts <- cbind(ID=rownames(beeCounts), beeCounts)
beeCounts$ID <- as.character(beeCounts$ID)
plotPermutations(beeCounts, nPerm = 20, topThresh = 50, option="log", outDir = getwd())
rm(list=ls())
dev.off()
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Method1")
thisPath <- getwd()
data <- readRDS("../../data/data.Rds")
View(data)
data <- as.matrix(data)
coldata = data.frame(row.names = colnames(data), virus = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],1,1))), diet = unlist(lapply(colnames(data), function (x) substring(unlist(strsplit(x, "[.]"))[1],2,2))), treatment = unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
coldata
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
library(DESeq2)
library(data.table)
library(ggplot2)
dds = DESeqDataSetFromMatrix(countData = data, colData = coldata, design = ~ treatment)
dds <- DESeq(dds)
uTreat <- unique(unlist(lapply(colnames(data), function (x) unlist(strsplit(x, "[.]"))[1])))
allPairs = data.frame(Treatment1 = factor(), Treatment2 = factor(), NumberDEG = numeric())
dataMetrics <- list()
uTreate
uTreat
for (i in 1:(length(uTreat)-1)){
for (j in (i+1):length(uTreat)){
res <- results(dds, contrast=c("treatment",uTreat[i],uTreat[j]))
hist(res$pvalue, breaks=20, col="grey", main=paste("pvalue for", uTreat[i], "and", uTreat[j]))
degLength <- length(which((res@listData)$padj <0.05))
allPairs = rbind(allPairs, data.frame(Treatment1 = uTreat[i], Treatment2 = uTreat[j], NumberDEG = degLength))
metrics = as.data.frame(res@listData)
metrics = cbind(ID = res@rownames, metrics)
metrics$ID = as.character(metrics$ID)
dataMetrics[[paste0(uTreat[i], "_", uTreat[j])]] <- metrics
}
}
allPairs <- allPairs[order(allPairs$NumberDEG),]
allPairs
saveRDS(dataMetrics, file="dataMetrics.Rds")
allPairs
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Method1")
setwd("~/Desktop/HoneyBeePaper/N_V/DESeq2/Method1")
